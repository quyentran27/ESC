
ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004520  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800462c  0800462c  0000562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e8  080046e8  00006024  2**0
                  CONTENTS
  4 .ARM          00000000  080046e8  080046e8  00006024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046e8  080046e8  00006024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e8  080046e8  000056e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046ec  080046ec  000056ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080046f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000024  08004714  00006024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08004714  000062bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abbb  00000000  00000000  0000604d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eff  00000000  00000000  00010c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00012b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f2  00000000  00000000  000136a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eb6  00000000  00000000  00013f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d06e  00000000  00000000  0002ce48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d85  00000000  00000000  00039eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3c3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f6c  00000000  00000000  000c3c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000c6bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08004614 	.word	0x08004614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08004614 	.word	0x08004614

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd4a 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa2c 	bl	80005b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 fa0c 	bl	8000578 <MX_DMA_Init>
  MX_TIM1_Init();
 8000160:	f000 f8a6 	bl	80002b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000164:	f000 f94c 	bl	8000400 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000168:	f000 f864 	bl	8000234 <MX_ADC1_Init>
  MX_TIM2_Init();
 800016c:	f000 f8f0 	bl	8000350 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000170:	f000 f9aa 	bl	80004c8 <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  maincpp();
 8000174:	f004 f9e6 	bl	8004544 <maincpp>
  while (1)
 8000178:	bf00      	nop
 800017a:	e7fd      	b.n	8000178 <main+0x2c>

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b094      	sub	sp, #80	@ 0x50
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000186:	2228      	movs	r2, #40	@ 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f004 fa16 	bl	80045bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	f107 0314 	add.w	r3, r7, #20
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ac:	2301      	movs	r3, #1
 80001ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b6:	2300      	movs	r3, #0
 80001b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001be:	2302      	movs	r3, #2
 80001c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fe78 	bl	8001ec8 <HAL_RCC_OscConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001de:	f000 fa8f 	bl	8000700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	230f      	movs	r3, #15
 80001e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2102      	movs	r1, #2
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 f8e4 	bl	80023cc <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800020a:	f000 fa79 	bl	8000700 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800020e:	2302      	movs	r3, #2
 8000210:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000216:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fa32 	bl	8002684 <HAL_RCCEx_PeriphCLKConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000226:	f000 fa6b 	bl	8000700 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3750      	adds	r7, #80	@ 0x50
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000244:	4b18      	ldr	r3, [pc, #96]	@ (80002a8 <MX_ADC1_Init+0x74>)
 8000246:	4a19      	ldr	r2, [pc, #100]	@ (80002ac <MX_ADC1_Init+0x78>)
 8000248:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800024a:	4b17      	ldr	r3, [pc, #92]	@ (80002a8 <MX_ADC1_Init+0x74>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000250:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <MX_ADC1_Init+0x74>)
 8000252:	2200      	movs	r2, #0
 8000254:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000256:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <MX_ADC1_Init+0x74>)
 8000258:	2200      	movs	r2, #0
 800025a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800025c:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <MX_ADC1_Init+0x74>)
 800025e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000262:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000264:	4b10      	ldr	r3, [pc, #64]	@ (80002a8 <MX_ADC1_Init+0x74>)
 8000266:	2200      	movs	r2, #0
 8000268:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800026a:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <MX_ADC1_Init+0x74>)
 800026c:	2201      	movs	r2, #1
 800026e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000270:	480d      	ldr	r0, [pc, #52]	@ (80002a8 <MX_ADC1_Init+0x74>)
 8000272:	f000 fd3f 	bl	8000cf4 <HAL_ADC_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800027c:	f000 fa40 	bl	8000700 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000280:	2303      	movs	r3, #3
 8000282:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000284:	2301      	movs	r3, #1
 8000286:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	4619      	mov	r1, r3
 8000290:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <MX_ADC1_Init+0x74>)
 8000292:	f000 fef7 	bl	8001084 <HAL_ADC_ConfigChannel>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800029c:	f000 fa30 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a0:	bf00      	nop
 80002a2:	3710      	adds	r7, #16
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000040 	.word	0x20000040
 80002ac:	40012400 	.word	0x40012400

080002b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b6:	f107 0308 	add.w	r3, r7, #8
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c4:	463b      	mov	r3, r7
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000348 <MX_TIM1_Init+0x98>)
 80002ce:	4a1f      	ldr	r2, [pc, #124]	@ (800034c <MX_TIM1_Init+0x9c>)
 80002d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000348 <MX_TIM1_Init+0x98>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <MX_TIM1_Init+0x98>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002de:	4b1a      	ldr	r3, [pc, #104]	@ (8000348 <MX_TIM1_Init+0x98>)
 80002e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e6:	4b18      	ldr	r3, [pc, #96]	@ (8000348 <MX_TIM1_Init+0x98>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002ec:	4b16      	ldr	r3, [pc, #88]	@ (8000348 <MX_TIM1_Init+0x98>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f2:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <MX_TIM1_Init+0x98>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002f8:	4813      	ldr	r0, [pc, #76]	@ (8000348 <MX_TIM1_Init+0x98>)
 80002fa:	f002 fa79 	bl	80027f0 <HAL_TIM_Base_Init>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000304:	f000 f9fc 	bl	8000700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800030c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	4619      	mov	r1, r3
 8000314:	480c      	ldr	r0, [pc, #48]	@ (8000348 <MX_TIM1_Init+0x98>)
 8000316:	f003 f9c5 	bl	80036a4 <HAL_TIM_ConfigClockSource>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000320:	f000 f9ee 	bl	8000700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000324:	2300      	movs	r3, #0
 8000326:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800032c:	463b      	mov	r3, r7
 800032e:	4619      	mov	r1, r3
 8000330:	4805      	ldr	r0, [pc, #20]	@ (8000348 <MX_TIM1_Init+0x98>)
 8000332:	f003 fe29 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800033c:	f000 f9e0 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000340:	bf00      	nop
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	200000b4 	.word	0x200000b4
 800034c:	40012c00 	.word	0x40012c00

08000350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08a      	sub	sp, #40	@ 0x28
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000356:	f107 0320 	add.w	r3, r7, #32
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]
 800036e:	615a      	str	r2, [r3, #20]
 8000370:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000372:	4b22      	ldr	r3, [pc, #136]	@ (80003fc <MX_TIM2_Init+0xac>)
 8000374:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000378:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800037a:	4b20      	ldr	r3, [pc, #128]	@ (80003fc <MX_TIM2_Init+0xac>)
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8000380:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <MX_TIM2_Init+0xac>)
 8000382:	2240      	movs	r2, #64	@ 0x40
 8000384:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4034-1;
 8000386:	4b1d      	ldr	r3, [pc, #116]	@ (80003fc <MX_TIM2_Init+0xac>)
 8000388:	f640 72c1 	movw	r2, #4033	@ 0xfc1
 800038c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038e:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <MX_TIM2_Init+0xac>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000394:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <MX_TIM2_Init+0xac>)
 8000396:	2200      	movs	r2, #0
 8000398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800039a:	4818      	ldr	r0, [pc, #96]	@ (80003fc <MX_TIM2_Init+0xac>)
 800039c:	f002 fc02 	bl	8002ba4 <HAL_TIM_PWM_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80003a6:	f000 f9ab 	bl	8000700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003aa:	2300      	movs	r3, #0
 80003ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b2:	f107 0320 	add.w	r3, r7, #32
 80003b6:	4619      	mov	r1, r3
 80003b8:	4810      	ldr	r0, [pc, #64]	@ (80003fc <MX_TIM2_Init+0xac>)
 80003ba:	f003 fde5 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80003c4:	f000 f99c 	bl	8000700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c8:	2360      	movs	r3, #96	@ 0x60
 80003ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	4619      	mov	r1, r3
 80003de:	4807      	ldr	r0, [pc, #28]	@ (80003fc <MX_TIM2_Init+0xac>)
 80003e0:	f003 f89e 	bl	8003520 <HAL_TIM_PWM_ConfigChannel>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80003ea:	f000 f989 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003ee:	4803      	ldr	r0, [pc, #12]	@ (80003fc <MX_TIM2_Init+0xac>)
 80003f0:	f000 fb28 	bl	8000a44 <HAL_TIM_MspPostInit>

}
 80003f4:	bf00      	nop
 80003f6:	3728      	adds	r7, #40	@ 0x28
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	200000fc 	.word	0x200000fc

08000400 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	@ 0x28
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000406:	f107 0320 	add.w	r3, r7, #32
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000422:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <MX_TIM3_Init+0xc0>)
 8000424:	4a27      	ldr	r2, [pc, #156]	@ (80004c4 <MX_TIM3_Init+0xc4>)
 8000426:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000428:	4b25      	ldr	r3, [pc, #148]	@ (80004c0 <MX_TIM3_Init+0xc0>)
 800042a:	2200      	movs	r2, #0
 800042c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800042e:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <MX_TIM3_Init+0xc0>)
 8000430:	2240      	movs	r2, #64	@ 0x40
 8000432:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4034-1;
 8000434:	4b22      	ldr	r3, [pc, #136]	@ (80004c0 <MX_TIM3_Init+0xc0>)
 8000436:	f640 72c1 	movw	r2, #4033	@ 0xfc1
 800043a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800043c:	4b20      	ldr	r3, [pc, #128]	@ (80004c0 <MX_TIM3_Init+0xc0>)
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000442:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <MX_TIM3_Init+0xc0>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000448:	481d      	ldr	r0, [pc, #116]	@ (80004c0 <MX_TIM3_Init+0xc0>)
 800044a:	f002 fbab 	bl	8002ba4 <HAL_TIM_PWM_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000454:	f000 f954 	bl	8000700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000458:	2300      	movs	r3, #0
 800045a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045c:	2300      	movs	r3, #0
 800045e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000460:	f107 0320 	add.w	r3, r7, #32
 8000464:	4619      	mov	r1, r3
 8000466:	4816      	ldr	r0, [pc, #88]	@ (80004c0 <MX_TIM3_Init+0xc0>)
 8000468:	f003 fd8e 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000472:	f000 f945 	bl	8000700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000476:	2360      	movs	r3, #96	@ 0x60
 8000478:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2208      	movs	r2, #8
 800048a:	4619      	mov	r1, r3
 800048c:	480c      	ldr	r0, [pc, #48]	@ (80004c0 <MX_TIM3_Init+0xc0>)
 800048e:	f003 f847 	bl	8003520 <HAL_TIM_PWM_ConfigChannel>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000498:	f000 f932 	bl	8000700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	220c      	movs	r2, #12
 80004a0:	4619      	mov	r1, r3
 80004a2:	4807      	ldr	r0, [pc, #28]	@ (80004c0 <MX_TIM3_Init+0xc0>)
 80004a4:	f003 f83c 	bl	8003520 <HAL_TIM_PWM_ConfigChannel>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80004ae:	f000 f927 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004b2:	4803      	ldr	r0, [pc, #12]	@ (80004c0 <MX_TIM3_Init+0xc0>)
 80004b4:	f000 fac6 	bl	8000a44 <HAL_TIM_MspPostInit>

}
 80004b8:	bf00      	nop
 80004ba:	3728      	adds	r7, #40	@ 0x28
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000144 	.word	0x20000144
 80004c4:	40000400 	.word	0x40000400

080004c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	@ 0x28
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ce:	f107 0320 	add.w	r3, r7, #32
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004ea:	4b21      	ldr	r3, [pc, #132]	@ (8000570 <MX_TIM4_Init+0xa8>)
 80004ec:	4a21      	ldr	r2, [pc, #132]	@ (8000574 <MX_TIM4_Init+0xac>)
 80004ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000;
 80004f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000570 <MX_TIM4_Init+0xa8>)
 80004f2:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 80004f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000570 <MX_TIM4_Init+0xa8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 300;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000570 <MX_TIM4_Init+0xa8>)
 8000500:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000504:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000506:	4b1a      	ldr	r3, [pc, #104]	@ (8000570 <MX_TIM4_Init+0xa8>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050c:	4b18      	ldr	r3, [pc, #96]	@ (8000570 <MX_TIM4_Init+0xa8>)
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000512:	4817      	ldr	r0, [pc, #92]	@ (8000570 <MX_TIM4_Init+0xa8>)
 8000514:	f002 fa06 	bl	8002924 <HAL_TIM_OC_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800051e:	f000 f8ef 	bl	8000700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000522:	2300      	movs	r3, #0
 8000524:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000526:	2300      	movs	r3, #0
 8000528:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	4619      	mov	r1, r3
 8000530:	480f      	ldr	r0, [pc, #60]	@ (8000570 <MX_TIM4_Init+0xa8>)
 8000532:	f003 fd29 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800053c:	f000 f8e0 	bl	8000700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	@ (8000570 <MX_TIM4_Init+0xa8>)
 8000558:	f002 ff86 	bl	8003468 <HAL_TIM_OC_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000562:	f000 f8cd 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3728      	adds	r7, #40	@ 0x28
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000018c 	.word	0x2000018c
 8000574:	40000800 	.word	0x40000800

08000578 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <MX_DMA_Init+0x38>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a0b      	ldr	r2, [pc, #44]	@ (80005b0 <MX_DMA_Init+0x38>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <MX_DMA_Init+0x38>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	200b      	movs	r0, #11
 800059c:	f001 f843 	bl	8001626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005a0:	200b      	movs	r0, #11
 80005a2:	f001 f85c 	bl	800165e <HAL_NVIC_EnableIRQ>

}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c8:	4b48      	ldr	r3, [pc, #288]	@ (80006ec <MX_GPIO_Init+0x138>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a47      	ldr	r2, [pc, #284]	@ (80006ec <MX_GPIO_Init+0x138>)
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b45      	ldr	r3, [pc, #276]	@ (80006ec <MX_GPIO_Init+0x138>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0310 	and.w	r3, r3, #16
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e0:	4b42      	ldr	r3, [pc, #264]	@ (80006ec <MX_GPIO_Init+0x138>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a41      	ldr	r2, [pc, #260]	@ (80006ec <MX_GPIO_Init+0x138>)
 80005e6:	f043 0320 	orr.w	r3, r3, #32
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b3f      	ldr	r3, [pc, #252]	@ (80006ec <MX_GPIO_Init+0x138>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0320 	and.w	r3, r3, #32
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b3c      	ldr	r3, [pc, #240]	@ (80006ec <MX_GPIO_Init+0x138>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a3b      	ldr	r2, [pc, #236]	@ (80006ec <MX_GPIO_Init+0x138>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b39      	ldr	r3, [pc, #228]	@ (80006ec <MX_GPIO_Init+0x138>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000610:	4b36      	ldr	r3, [pc, #216]	@ (80006ec <MX_GPIO_Init+0x138>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a35      	ldr	r2, [pc, #212]	@ (80006ec <MX_GPIO_Init+0x138>)
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b33      	ldr	r3, [pc, #204]	@ (80006ec <MX_GPIO_Init+0x138>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0308 	and.w	r3, r3, #8
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800062e:	4830      	ldr	r0, [pc, #192]	@ (80006f0 <MX_GPIO_Init+0x13c>)
 8000630:	f001 fc1a 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OD_A_Pin|OD_B_Pin|OD_C_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2170      	movs	r1, #112	@ 0x70
 8000638:	482e      	ldr	r0, [pc, #184]	@ (80006f4 <MX_GPIO_Init+0x140>)
 800063a:	f001 fc15 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800063e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4619      	mov	r1, r3
 8000656:	4826      	ldr	r0, [pc, #152]	@ (80006f0 <MX_GPIO_Init+0x13c>)
 8000658:	f001 fa82 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZC_B_Pin ZC_C_Pin */
  GPIO_InitStruct.Pin = ZC_B_Pin|ZC_C_Pin;
 800065c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <MX_GPIO_Init+0x144>)
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000666:	2301      	movs	r3, #1
 8000668:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	4619      	mov	r1, r3
 8000670:	481f      	ldr	r0, [pc, #124]	@ (80006f0 <MX_GPIO_Init+0x13c>)
 8000672:	f001 fa75 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : REV_Pin */
  GPIO_InitStruct.Pin = REV_Pin;
 8000676:	2304      	movs	r3, #4
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800067e:	2302      	movs	r3, #2
 8000680:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(REV_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	4619      	mov	r1, r3
 8000688:	481a      	ldr	r0, [pc, #104]	@ (80006f4 <MX_GPIO_Init+0x140>)
 800068a:	f001 fa69 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : OD_A_Pin OD_B_Pin OD_C_Pin */
  GPIO_InitStruct.Pin = OD_A_Pin|OD_B_Pin|OD_C_Pin;
 800068e:	2370      	movs	r3, #112	@ 0x70
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000696:	2302      	movs	r3, #2
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2302      	movs	r3, #2
 800069c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <MX_GPIO_Init+0x140>)
 80006a6:	f001 fa5b 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZC_A_Pin */
  GPIO_InitStruct.Pin = ZC_A_Pin;
 80006aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_GPIO_Init+0x144>)
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ZC_A_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	480f      	ldr	r0, [pc, #60]	@ (80006fc <MX_GPIO_Init+0x148>)
 80006c0:	f001 fa4e 	bl	8001b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2101      	movs	r1, #1
 80006c8:	2017      	movs	r0, #23
 80006ca:	f000 ffac 	bl	8001626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006ce:	2017      	movs	r0, #23
 80006d0:	f000 ffc5 	bl	800165e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2101      	movs	r1, #1
 80006d8:	2028      	movs	r0, #40	@ 0x28
 80006da:	f000 ffa4 	bl	8001626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006de:	2028      	movs	r0, #40	@ 0x28
 80006e0:	f000 ffbd 	bl	800165e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40011000 	.word	0x40011000
 80006f4:	40010800 	.word	0x40010800
 80006f8:	10210000 	.word	0x10210000
 80006fc:	40010c00 	.word	0x40010c00

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <Error_Handler+0x8>

0800070c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <HAL_MspInit+0x5c>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	4a14      	ldr	r2, [pc, #80]	@ (8000768 <HAL_MspInit+0x5c>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6193      	str	r3, [r2, #24]
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <HAL_MspInit+0x5c>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <HAL_MspInit+0x5c>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	4a0e      	ldr	r2, [pc, #56]	@ (8000768 <HAL_MspInit+0x5c>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000734:	61d3      	str	r3, [r2, #28]
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <HAL_MspInit+0x5c>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <HAL_MspInit+0x60>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	4a04      	ldr	r2, [pc, #16]	@ (800076c <HAL_MspInit+0x60>)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	40021000 	.word	0x40021000
 800076c:	40010000 	.word	0x40010000

08000770 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a29      	ldr	r2, [pc, #164]	@ (8000830 <HAL_ADC_MspInit+0xc0>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d14a      	bne.n	8000826 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000790:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <HAL_ADC_MspInit+0xc4>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a27      	ldr	r2, [pc, #156]	@ (8000834 <HAL_ADC_MspInit+0xc4>)
 8000796:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <HAL_ADC_MspInit+0xc4>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <HAL_ADC_MspInit+0xc4>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <HAL_ADC_MspInit+0xc4>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <HAL_ADC_MspInit+0xc4>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007c0:	2308      	movs	r3, #8
 80007c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c4:	2303      	movs	r3, #3
 80007c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	481a      	ldr	r0, [pc, #104]	@ (8000838 <HAL_ADC_MspInit+0xc8>)
 80007d0:	f001 f9c6 	bl	8001b60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <HAL_ADC_MspInit+0xcc>)
 80007d6:	4a1a      	ldr	r2, [pc, #104]	@ (8000840 <HAL_ADC_MspInit+0xd0>)
 80007d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <HAL_ADC_MspInit+0xcc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e0:	4b16      	ldr	r3, [pc, #88]	@ (800083c <HAL_ADC_MspInit+0xcc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007e6:	4b15      	ldr	r3, [pc, #84]	@ (800083c <HAL_ADC_MspInit+0xcc>)
 80007e8:	2280      	movs	r2, #128	@ 0x80
 80007ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007ec:	4b13      	ldr	r3, [pc, #76]	@ (800083c <HAL_ADC_MspInit+0xcc>)
 80007ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <HAL_ADC_MspInit+0xcc>)
 80007f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <HAL_ADC_MspInit+0xcc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <HAL_ADC_MspInit+0xcc>)
 8000804:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000808:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800080a:	480c      	ldr	r0, [pc, #48]	@ (800083c <HAL_ADC_MspInit+0xcc>)
 800080c:	f000 ff42 	bl	8001694 <HAL_DMA_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000816:	f7ff ff73 	bl	8000700 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a07      	ldr	r2, [pc, #28]	@ (800083c <HAL_ADC_MspInit+0xcc>)
 800081e:	621a      	str	r2, [r3, #32]
 8000820:	4a06      	ldr	r2, [pc, #24]	@ (800083c <HAL_ADC_MspInit+0xcc>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	3720      	adds	r7, #32
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40012400 	.word	0x40012400
 8000834:	40021000 	.word	0x40021000
 8000838:	40010800 	.word	0x40010800
 800083c:	20000070 	.word	0x20000070
 8000840:	40020008 	.word	0x40020008

08000844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a09      	ldr	r2, [pc, #36]	@ (8000878 <HAL_TIM_Base_MspInit+0x34>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d10b      	bne.n	800086e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_TIM_Base_MspInit+0x38>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <HAL_TIM_Base_MspInit+0x38>)
 800085c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_TIM_Base_MspInit+0x38>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	40012c00 	.word	0x40012c00
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000890:	d135      	bne.n	80008fe <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000892:	4b51      	ldr	r3, [pc, #324]	@ (80009d8 <HAL_TIM_PWM_MspInit+0x158>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a50      	ldr	r2, [pc, #320]	@ (80009d8 <HAL_TIM_PWM_MspInit+0x158>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b4e      	ldr	r3, [pc, #312]	@ (80009d8 <HAL_TIM_PWM_MspInit+0x158>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80008aa:	4b4c      	ldr	r3, [pc, #304]	@ (80009dc <HAL_TIM_PWM_MspInit+0x15c>)
 80008ac:	4a4c      	ldr	r2, [pc, #304]	@ (80009e0 <HAL_TIM_PWM_MspInit+0x160>)
 80008ae:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008b0:	4b4a      	ldr	r3, [pc, #296]	@ (80009dc <HAL_TIM_PWM_MspInit+0x15c>)
 80008b2:	2210      	movs	r2, #16
 80008b4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b6:	4b49      	ldr	r3, [pc, #292]	@ (80009dc <HAL_TIM_PWM_MspInit+0x15c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008bc:	4b47      	ldr	r3, [pc, #284]	@ (80009dc <HAL_TIM_PWM_MspInit+0x15c>)
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008c2:	4b46      	ldr	r3, [pc, #280]	@ (80009dc <HAL_TIM_PWM_MspInit+0x15c>)
 80008c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008c8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ca:	4b44      	ldr	r3, [pc, #272]	@ (80009dc <HAL_TIM_PWM_MspInit+0x15c>)
 80008cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008d0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80008d2:	4b42      	ldr	r3, [pc, #264]	@ (80009dc <HAL_TIM_PWM_MspInit+0x15c>)
 80008d4:	2220      	movs	r2, #32
 80008d6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80008d8:	4b40      	ldr	r3, [pc, #256]	@ (80009dc <HAL_TIM_PWM_MspInit+0x15c>)
 80008da:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80008de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80008e0:	483e      	ldr	r0, [pc, #248]	@ (80009dc <HAL_TIM_PWM_MspInit+0x15c>)
 80008e2:	f000 fed7 	bl	8001694 <HAL_DMA_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 80008ec:	f7ff ff08 	bl	8000700 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a3a      	ldr	r2, [pc, #232]	@ (80009dc <HAL_TIM_PWM_MspInit+0x15c>)
 80008f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80008f6:	4a39      	ldr	r2, [pc, #228]	@ (80009dc <HAL_TIM_PWM_MspInit+0x15c>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008fc:	e068      	b.n	80009d0 <HAL_TIM_PWM_MspInit+0x150>
  else if(htim_pwm->Instance==TIM3)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a38      	ldr	r2, [pc, #224]	@ (80009e4 <HAL_TIM_PWM_MspInit+0x164>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d163      	bne.n	80009d0 <HAL_TIM_PWM_MspInit+0x150>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000908:	4b33      	ldr	r3, [pc, #204]	@ (80009d8 <HAL_TIM_PWM_MspInit+0x158>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	4a32      	ldr	r2, [pc, #200]	@ (80009d8 <HAL_TIM_PWM_MspInit+0x158>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	61d3      	str	r3, [r2, #28]
 8000914:	4b30      	ldr	r3, [pc, #192]	@ (80009d8 <HAL_TIM_PWM_MspInit+0x158>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 8000920:	4b31      	ldr	r3, [pc, #196]	@ (80009e8 <HAL_TIM_PWM_MspInit+0x168>)
 8000922:	4a32      	ldr	r2, [pc, #200]	@ (80009ec <HAL_TIM_PWM_MspInit+0x16c>)
 8000924:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000926:	4b30      	ldr	r3, [pc, #192]	@ (80009e8 <HAL_TIM_PWM_MspInit+0x168>)
 8000928:	2210      	movs	r2, #16
 800092a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800092c:	4b2e      	ldr	r3, [pc, #184]	@ (80009e8 <HAL_TIM_PWM_MspInit+0x168>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000932:	4b2d      	ldr	r3, [pc, #180]	@ (80009e8 <HAL_TIM_PWM_MspInit+0x168>)
 8000934:	2280      	movs	r2, #128	@ 0x80
 8000936:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000938:	4b2b      	ldr	r3, [pc, #172]	@ (80009e8 <HAL_TIM_PWM_MspInit+0x168>)
 800093a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800093e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000940:	4b29      	ldr	r3, [pc, #164]	@ (80009e8 <HAL_TIM_PWM_MspInit+0x168>)
 8000942:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000946:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8000948:	4b27      	ldr	r3, [pc, #156]	@ (80009e8 <HAL_TIM_PWM_MspInit+0x168>)
 800094a:	2220      	movs	r2, #32
 800094c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800094e:	4b26      	ldr	r3, [pc, #152]	@ (80009e8 <HAL_TIM_PWM_MspInit+0x168>)
 8000950:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000954:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8000956:	4824      	ldr	r0, [pc, #144]	@ (80009e8 <HAL_TIM_PWM_MspInit+0x168>)
 8000958:	f000 fe9c 	bl	8001694 <HAL_DMA_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_TIM_PWM_MspInit+0xe6>
      Error_Handler();
 8000962:	f7ff fecd 	bl	8000700 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a1f      	ldr	r2, [pc, #124]	@ (80009e8 <HAL_TIM_PWM_MspInit+0x168>)
 800096a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800096c:	4a1e      	ldr	r2, [pc, #120]	@ (80009e8 <HAL_TIM_PWM_MspInit+0x168>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 8000974:	4a1f      	ldr	r2, [pc, #124]	@ (80009f4 <HAL_TIM_PWM_MspInit+0x174>)
 8000976:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 800097a:	2210      	movs	r2, #16
 800097c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 8000986:	2280      	movs	r2, #128	@ 0x80
 8000988:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800098a:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 800098c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000990:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000992:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 8000994:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000998:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 800099c:	2220      	movs	r2, #32
 800099e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 80009a2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80009a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80009a8:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 80009aa:	f000 fe73 	bl	8001694 <HAL_DMA_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_TIM_PWM_MspInit+0x138>
      Error_Handler();
 80009b4:	f7ff fea4 	bl	8000700 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 80009bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80009be:	4a0c      	ldr	r2, [pc, #48]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 80009c8:	621a      	str	r2, [r3, #32]
 80009ca:	4a09      	ldr	r2, [pc, #36]	@ (80009f0 <HAL_TIM_PWM_MspInit+0x170>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000
 80009dc:	200001d4 	.word	0x200001d4
 80009e0:	40020058 	.word	0x40020058
 80009e4:	40000400 	.word	0x40000400
 80009e8:	20000218 	.word	0x20000218
 80009ec:	4002001c 	.word	0x4002001c
 80009f0:	2000025c 	.word	0x2000025c
 80009f4:	40020030 	.word	0x40020030

080009f8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0d      	ldr	r2, [pc, #52]	@ (8000a3c <HAL_TIM_OC_MspInit+0x44>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d113      	bne.n	8000a32 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <HAL_TIM_OC_MspInit+0x48>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a40 <HAL_TIM_OC_MspInit+0x48>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <HAL_TIM_OC_MspInit+0x48>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	201e      	movs	r0, #30
 8000a28:	f000 fdfd 	bl	8001626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a2c:	201e      	movs	r0, #30
 8000a2e:	f000 fe16 	bl	800165e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40000800 	.word	0x40000800
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a62:	d118      	bne.n	8000a96 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <HAL_TIM_MspPostInit+0x94>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad8 <HAL_TIM_MspPostInit+0x94>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <HAL_TIM_MspPostInit+0x94>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_A_Pin;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_A_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4813      	ldr	r0, [pc, #76]	@ (8000adc <HAL_TIM_MspPostInit+0x98>)
 8000a90:	f001 f866 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a94:	e01c      	b.n	8000ad0 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a11      	ldr	r2, [pc, #68]	@ (8000ae0 <HAL_TIM_MspPostInit+0x9c>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d117      	bne.n	8000ad0 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <HAL_TIM_MspPostInit+0x94>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad8 <HAL_TIM_MspPostInit+0x94>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <HAL_TIM_MspPostInit+0x94>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_B_Pin|PWM_C_Pin;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	@ (8000ae4 <HAL_TIM_MspPostInit+0xa0>)
 8000acc:	f001 f848 	bl	8001b60 <HAL_GPIO_Init>
}
 8000ad0:	bf00      	nop
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40000400 	.word	0x40000400
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f89c 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <DMA1_Channel1_IRQHandler+0x10>)
 8000b46:	f000 fed7 	bl	80018f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000070 	.word	0x20000070

08000b54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZC_A_Pin);
 8000b58:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b5c:	f001 f99c 	bl	8001e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <TIM4_IRQHandler+0x10>)
 8000b6a:	f002 fb75 	bl	8003258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000018c 	.word	0x2000018c

08000b78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZC_B_Pin);
 8000b7c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b80:	f001 f98a 	bl	8001e98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ZC_C_Pin);
 8000b84:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000b88:	f001 f986 	bl	8001e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b9c:	f7ff fff8 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba0:	480b      	ldr	r0, [pc, #44]	@ (8000bd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ba2:	490c      	ldr	r1, [pc, #48]	@ (8000bd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a09      	ldr	r2, [pc, #36]	@ (8000bdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bb8:	4c09      	ldr	r4, [pc, #36]	@ (8000be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f003 fd01 	bl	80045cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bca:	f7ff fabf 	bl	800014c <main>
  bx lr
 8000bce:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000bd8:	080046f0 	.word	0x080046f0
  ldr r2, =_sbss
 8000bdc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000be0:	200002bc 	.word	0x200002bc

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <HAL_Init+0x28>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	@ (8000c10 <HAL_Init+0x28>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 fd09 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fd82 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fd21 	bl	800167a <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 fce9 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	@ (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <HAL_IncTick+0x1c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a03      	ldr	r2, [pc, #12]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	20000008 	.word	0x20000008
 8000c94:	200002a0 	.word	0x200002a0

08000c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	@ (8000ca8 <HAL_GetTick+0x10>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	200002a0 	.word	0x200002a0

08000cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff fff0 	bl	8000c98 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc4:	d005      	beq.n	8000cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <HAL_Delay+0x44>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ffe0 	bl	8000c98 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8f7      	bhi.n	8000cd4 <HAL_Delay+0x28>
  {
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e0be      	b.n	8000e94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d109      	bne.n	8000d38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff fd1c 	bl	8000770 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 faf5 	bl	8001328 <ADC_ConversionStop_Disable>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f040 8099 	bne.w	8000e82 <HAL_ADC_Init+0x18e>
 8000d50:	7dfb      	ldrb	r3, [r7, #23]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8095 	bne.w	8000e82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d60:	f023 0302 	bic.w	r3, r3, #2
 8000d64:	f043 0202 	orr.w	r2, r3, #2
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7b1b      	ldrb	r3, [r3, #12]
 8000d7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d8c:	d003      	beq.n	8000d96 <HAL_ADC_Init+0xa2>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d102      	bne.n	8000d9c <HAL_ADC_Init+0xa8>
 8000d96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d9a:	e000      	b.n	8000d9e <HAL_ADC_Init+0xaa>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7d1b      	ldrb	r3, [r3, #20]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d119      	bne.n	8000de0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7b1b      	ldrb	r3, [r3, #12]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d109      	bne.n	8000dc8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	035a      	lsls	r2, r3, #13
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	e00b      	b.n	8000de0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dcc:	f043 0220 	orr.w	r2, r3, #32
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd8:	f043 0201 	orr.w	r2, r3, #1
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	4b28      	ldr	r3, [pc, #160]	@ (8000e9c <HAL_ADC_Init+0x1a8>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6812      	ldr	r2, [r2, #0]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	430b      	orrs	r3, r1
 8000e06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e10:	d003      	beq.n	8000e1a <HAL_ADC_Init+0x126>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d104      	bne.n	8000e24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	051b      	lsls	r3, r3, #20
 8000e22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	430a      	orrs	r2, r1
 8000e36:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <HAL_ADC_Init+0x1ac>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d10b      	bne.n	8000e60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e52:	f023 0303 	bic.w	r3, r3, #3
 8000e56:	f043 0201 	orr.w	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e5e:	e018      	b.n	8000e92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e64:	f023 0312 	bic.w	r3, r3, #18
 8000e68:	f043 0210 	orr.w	r2, r3, #16
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e74:	f043 0201 	orr.w	r2, r3, #1
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e80:	e007      	b.n	8000e92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e86:	f043 0210 	orr.w	r2, r3, #16
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	ffe1f7fd 	.word	0xffe1f7fd
 8000ea0:	ff1f0efe 	.word	0xff1f0efe

08000ea4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a64      	ldr	r2, [pc, #400]	@ (800104c <HAL_ADC_Start_DMA+0x1a8>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d004      	beq.n	8000ec8 <HAL_ADC_Start_DMA+0x24>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a63      	ldr	r2, [pc, #396]	@ (8001050 <HAL_ADC_Start_DMA+0x1ac>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d106      	bne.n	8000ed6 <HAL_ADC_Start_DMA+0x32>
 8000ec8:	4b60      	ldr	r3, [pc, #384]	@ (800104c <HAL_ADC_Start_DMA+0x1a8>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f040 80b3 	bne.w	800103c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d101      	bne.n	8000ee4 <HAL_ADC_Start_DMA+0x40>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	e0ae      	b.n	8001042 <HAL_ADC_Start_DMA+0x19e>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f9c1 	bl	8001274 <ADC_Enable>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f040 809a 	bne.w	8001032 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f06:	f023 0301 	bic.w	r3, r3, #1
 8000f0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a4e      	ldr	r2, [pc, #312]	@ (8001050 <HAL_ADC_Start_DMA+0x1ac>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d105      	bne.n	8000f28 <HAL_ADC_Start_DMA+0x84>
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800104c <HAL_ADC_Start_DMA+0x1a8>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d115      	bne.n	8000f54 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d026      	beq.n	8000f90 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f52:	e01d      	b.n	8000f90 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f58:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a39      	ldr	r2, [pc, #228]	@ (800104c <HAL_ADC_Start_DMA+0x1a8>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d004      	beq.n	8000f74 <HAL_ADC_Start_DMA+0xd0>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a38      	ldr	r2, [pc, #224]	@ (8001050 <HAL_ADC_Start_DMA+0x1ac>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d10d      	bne.n	8000f90 <HAL_ADC_Start_DMA+0xec>
 8000f74:	4b35      	ldr	r3, [pc, #212]	@ (800104c <HAL_ADC_Start_DMA+0x1a8>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d007      	beq.n	8000f90 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa0:	f023 0206 	bic.w	r2, r3, #6
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fa8:	e002      	b.n	8000fb0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4a25      	ldr	r2, [pc, #148]	@ (8001054 <HAL_ADC_Start_DMA+0x1b0>)
 8000fbe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	4a24      	ldr	r2, [pc, #144]	@ (8001058 <HAL_ADC_Start_DMA+0x1b4>)
 8000fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4a23      	ldr	r2, [pc, #140]	@ (800105c <HAL_ADC_Start_DMA+0x1b8>)
 8000fce:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f06f 0202 	mvn.w	r2, #2
 8000fd8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fe8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6a18      	ldr	r0, [r3, #32]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	334c      	adds	r3, #76	@ 0x4c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f000 fba5 	bl	8001748 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001008:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800100c:	d108      	bne.n	8001020 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800101c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800101e:	e00f      	b.n	8001040 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800102e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001030:	e006      	b.n	8001040 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800103a:	e001      	b.n	8001040 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001040:	7dfb      	ldrb	r3, [r7, #23]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40012400 	.word	0x40012400
 8001050:	40012800 	.word	0x40012800
 8001054:	080013ab 	.word	0x080013ab
 8001058:	08001427 	.word	0x08001427
 800105c:	08001443 	.word	0x08001443

08001060 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800109c:	2b01      	cmp	r3, #1
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x20>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e0dc      	b.n	800125e <HAL_ADC_ConfigChannel+0x1da>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b06      	cmp	r3, #6
 80010b2:	d81c      	bhi.n	80010ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	3b05      	subs	r3, #5
 80010c6:	221f      	movs	r2, #31
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4019      	ands	r1, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	3b05      	subs	r3, #5
 80010e0:	fa00 f203 	lsl.w	r2, r0, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ec:	e03c      	b.n	8001168 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b0c      	cmp	r3, #12
 80010f4:	d81c      	bhi.n	8001130 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	3b23      	subs	r3, #35	@ 0x23
 8001108:	221f      	movs	r2, #31
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	4019      	ands	r1, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	3b23      	subs	r3, #35	@ 0x23
 8001122:	fa00 f203 	lsl.w	r2, r0, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	631a      	str	r2, [r3, #48]	@ 0x30
 800112e:	e01b      	b.n	8001168 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	3b41      	subs	r3, #65	@ 0x41
 8001142:	221f      	movs	r2, #31
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	4019      	ands	r1, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	3b41      	subs	r3, #65	@ 0x41
 800115c:	fa00 f203 	lsl.w	r2, r0, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b09      	cmp	r3, #9
 800116e:	d91c      	bls.n	80011aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68d9      	ldr	r1, [r3, #12]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	3b1e      	subs	r3, #30
 8001182:	2207      	movs	r2, #7
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	4019      	ands	r1, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	6898      	ldr	r0, [r3, #8]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	3b1e      	subs	r3, #30
 800119c:	fa00 f203 	lsl.w	r2, r0, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	e019      	b.n	80011de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6919      	ldr	r1, [r3, #16]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	2207      	movs	r2, #7
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4019      	ands	r1, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	6898      	ldr	r0, [r3, #8]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	fa00 f203 	lsl.w	r2, r0, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b10      	cmp	r3, #16
 80011e4:	d003      	beq.n	80011ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ea:	2b11      	cmp	r3, #17
 80011ec:	d132      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001268 <HAL_ADC_ConfigChannel+0x1e4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d125      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d126      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001214:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b10      	cmp	r3, #16
 800121c:	d11a      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800121e:	4b13      	ldr	r3, [pc, #76]	@ (800126c <HAL_ADC_ConfigChannel+0x1e8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a13      	ldr	r2, [pc, #76]	@ (8001270 <HAL_ADC_ConfigChannel+0x1ec>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	0c9a      	lsrs	r2, r3, #18
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001234:	e002      	b.n	800123c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3b01      	subs	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f9      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x1b2>
 8001242:	e007      	b.n	8001254 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001248:	f043 0220 	orr.w	r2, r3, #32
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	40012400 	.word	0x40012400
 800126c:	20000000 	.word	0x20000000
 8001270:	431bde83 	.word	0x431bde83

08001274 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b01      	cmp	r3, #1
 8001290:	d040      	beq.n	8001314 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f042 0201 	orr.w	r2, r2, #1
 80012a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <ADC_Enable+0xac>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001324 <ADC_Enable+0xb0>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	0c9b      	lsrs	r3, r3, #18
 80012ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012b0:	e002      	b.n	80012b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f9      	bne.n	80012b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012be:	f7ff fceb 	bl	8000c98 <HAL_GetTick>
 80012c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012c4:	e01f      	b.n	8001306 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012c6:	f7ff fce7 	bl	8000c98 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d918      	bls.n	8001306 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d011      	beq.n	8001306 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e6:	f043 0210 	orr.w	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e007      	b.n	8001316 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d1d8      	bne.n	80012c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000000 	.word	0x20000000
 8001324:	431bde83 	.word	0x431bde83

08001328 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b01      	cmp	r3, #1
 8001340:	d12e      	bne.n	80013a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001352:	f7ff fca1 	bl	8000c98 <HAL_GetTick>
 8001356:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001358:	e01b      	b.n	8001392 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800135a:	f7ff fc9d 	bl	8000c98 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d914      	bls.n	8001392 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10d      	bne.n	8001392 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137a:	f043 0210 	orr.w	r2, r3, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e007      	b.n	80013a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b01      	cmp	r3, #1
 800139e:	d0dc      	beq.n	800135a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d127      	bne.n	8001414 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013de:	d115      	bne.n	800140c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d111      	bne.n	800140c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d105      	bne.n	800140c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f002 fff3 	bl	80043f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001412:	e004      	b.n	800141e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	4798      	blx	r3
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f7ff fe13 	bl	8001060 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001454:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001460:	f043 0204 	orr.w	r2, r3, #4
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f7ff fe02 	bl	8001072 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4906      	ldr	r1, [pc, #24]	@ (8001510 <__NVIC_EnableIRQ+0x34>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	@ (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	@ (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	@ 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	@ 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff90 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	@ (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	@ (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff2d 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff42 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff90 	bl	8001568 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5f 	bl	8001514 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff35 	bl	80014dc <__NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffa2 	bl	80015cc <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e043      	b.n	8001732 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b22      	ldr	r3, [pc, #136]	@ (800173c <HAL_DMA_Init+0xa8>)
 80016b2:	4413      	add	r3, r2
 80016b4:	4a22      	ldr	r2, [pc, #136]	@ (8001740 <HAL_DMA_Init+0xac>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	009a      	lsls	r2, r3, #2
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001744 <HAL_DMA_Init+0xb0>)
 80016c6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2202      	movs	r2, #2
 80016cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80016e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001704:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	bffdfff8 	.word	0xbffdfff8
 8001740:	cccccccd 	.word	0xcccccccd
 8001744:	40020000 	.word	0x40020000

08001748 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_DMA_Start_IT+0x20>
 8001764:	2302      	movs	r3, #2
 8001766:	e04b      	b.n	8001800 <HAL_DMA_Start_IT+0xb8>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d13a      	bne.n	80017f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	68b9      	ldr	r1, [r7, #8]
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f000 f9af 	bl	8001b04 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d008      	beq.n	80017c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 020e 	orr.w	r2, r2, #14
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e00f      	b.n	80017e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0204 	bic.w	r2, r2, #4
 80017ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 020a 	orr.w	r2, r2, #10
 80017de:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e005      	b.n	80017fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017fa:	2302      	movs	r3, #2
 80017fc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d005      	beq.n	800182c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2204      	movs	r2, #4
 8001824:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	e051      	b.n	80018d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 020e 	bic.w	r2, r2, #14
 800183a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a22      	ldr	r2, [pc, #136]	@ (80018dc <HAL_DMA_Abort_IT+0xd4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d029      	beq.n	80018aa <HAL_DMA_Abort_IT+0xa2>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a21      	ldr	r2, [pc, #132]	@ (80018e0 <HAL_DMA_Abort_IT+0xd8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d022      	beq.n	80018a6 <HAL_DMA_Abort_IT+0x9e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1f      	ldr	r2, [pc, #124]	@ (80018e4 <HAL_DMA_Abort_IT+0xdc>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01a      	beq.n	80018a0 <HAL_DMA_Abort_IT+0x98>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1e      	ldr	r2, [pc, #120]	@ (80018e8 <HAL_DMA_Abort_IT+0xe0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d012      	beq.n	800189a <HAL_DMA_Abort_IT+0x92>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1c      	ldr	r2, [pc, #112]	@ (80018ec <HAL_DMA_Abort_IT+0xe4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00a      	beq.n	8001894 <HAL_DMA_Abort_IT+0x8c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <HAL_DMA_Abort_IT+0xe8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d102      	bne.n	800188e <HAL_DMA_Abort_IT+0x86>
 8001888:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800188c:	e00e      	b.n	80018ac <HAL_DMA_Abort_IT+0xa4>
 800188e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001892:	e00b      	b.n	80018ac <HAL_DMA_Abort_IT+0xa4>
 8001894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001898:	e008      	b.n	80018ac <HAL_DMA_Abort_IT+0xa4>
 800189a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189e:	e005      	b.n	80018ac <HAL_DMA_Abort_IT+0xa4>
 80018a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a4:	e002      	b.n	80018ac <HAL_DMA_Abort_IT+0xa4>
 80018a6:	2310      	movs	r3, #16
 80018a8:	e000      	b.n	80018ac <HAL_DMA_Abort_IT+0xa4>
 80018aa:	2301      	movs	r3, #1
 80018ac:	4a11      	ldr	r2, [pc, #68]	@ (80018f4 <HAL_DMA_Abort_IT+0xec>)
 80018ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4798      	blx	r3
    } 
  }
  return status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020008 	.word	0x40020008
 80018e0:	4002001c 	.word	0x4002001c
 80018e4:	40020030 	.word	0x40020030
 80018e8:	40020044 	.word	0x40020044
 80018ec:	40020058 	.word	0x40020058
 80018f0:	4002006c 	.word	0x4002006c
 80018f4:	40020000 	.word	0x40020000

080018f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	2204      	movs	r2, #4
 8001916:	409a      	lsls	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d04f      	beq.n	80019c0 <HAL_DMA_IRQHandler+0xc8>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	d04a      	beq.n	80019c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0204 	bic.w	r2, r2, #4
 8001946:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a66      	ldr	r2, [pc, #408]	@ (8001ae8 <HAL_DMA_IRQHandler+0x1f0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d029      	beq.n	80019a6 <HAL_DMA_IRQHandler+0xae>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a65      	ldr	r2, [pc, #404]	@ (8001aec <HAL_DMA_IRQHandler+0x1f4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d022      	beq.n	80019a2 <HAL_DMA_IRQHandler+0xaa>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a63      	ldr	r2, [pc, #396]	@ (8001af0 <HAL_DMA_IRQHandler+0x1f8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d01a      	beq.n	800199c <HAL_DMA_IRQHandler+0xa4>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a62      	ldr	r2, [pc, #392]	@ (8001af4 <HAL_DMA_IRQHandler+0x1fc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d012      	beq.n	8001996 <HAL_DMA_IRQHandler+0x9e>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a60      	ldr	r2, [pc, #384]	@ (8001af8 <HAL_DMA_IRQHandler+0x200>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00a      	beq.n	8001990 <HAL_DMA_IRQHandler+0x98>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a5f      	ldr	r2, [pc, #380]	@ (8001afc <HAL_DMA_IRQHandler+0x204>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d102      	bne.n	800198a <HAL_DMA_IRQHandler+0x92>
 8001984:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001988:	e00e      	b.n	80019a8 <HAL_DMA_IRQHandler+0xb0>
 800198a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800198e:	e00b      	b.n	80019a8 <HAL_DMA_IRQHandler+0xb0>
 8001990:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001994:	e008      	b.n	80019a8 <HAL_DMA_IRQHandler+0xb0>
 8001996:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800199a:	e005      	b.n	80019a8 <HAL_DMA_IRQHandler+0xb0>
 800199c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019a0:	e002      	b.n	80019a8 <HAL_DMA_IRQHandler+0xb0>
 80019a2:	2340      	movs	r3, #64	@ 0x40
 80019a4:	e000      	b.n	80019a8 <HAL_DMA_IRQHandler+0xb0>
 80019a6:	2304      	movs	r3, #4
 80019a8:	4a55      	ldr	r2, [pc, #340]	@ (8001b00 <HAL_DMA_IRQHandler+0x208>)
 80019aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 8094 	beq.w	8001ade <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019be:	e08e      	b.n	8001ade <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	2202      	movs	r2, #2
 80019c6:	409a      	lsls	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d056      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x186>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d051      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 020a 	bic.w	r2, r2, #10
 80019f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a38      	ldr	r2, [pc, #224]	@ (8001ae8 <HAL_DMA_IRQHandler+0x1f0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d029      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x166>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a37      	ldr	r2, [pc, #220]	@ (8001aec <HAL_DMA_IRQHandler+0x1f4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d022      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x162>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a35      	ldr	r2, [pc, #212]	@ (8001af0 <HAL_DMA_IRQHandler+0x1f8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d01a      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x15c>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a34      	ldr	r2, [pc, #208]	@ (8001af4 <HAL_DMA_IRQHandler+0x1fc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d012      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x156>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a32      	ldr	r2, [pc, #200]	@ (8001af8 <HAL_DMA_IRQHandler+0x200>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00a      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x150>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a31      	ldr	r2, [pc, #196]	@ (8001afc <HAL_DMA_IRQHandler+0x204>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d102      	bne.n	8001a42 <HAL_DMA_IRQHandler+0x14a>
 8001a3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a40:	e00e      	b.n	8001a60 <HAL_DMA_IRQHandler+0x168>
 8001a42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a46:	e00b      	b.n	8001a60 <HAL_DMA_IRQHandler+0x168>
 8001a48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a4c:	e008      	b.n	8001a60 <HAL_DMA_IRQHandler+0x168>
 8001a4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a52:	e005      	b.n	8001a60 <HAL_DMA_IRQHandler+0x168>
 8001a54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a58:	e002      	b.n	8001a60 <HAL_DMA_IRQHandler+0x168>
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	e000      	b.n	8001a60 <HAL_DMA_IRQHandler+0x168>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	4a27      	ldr	r2, [pc, #156]	@ (8001b00 <HAL_DMA_IRQHandler+0x208>)
 8001a62:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d034      	beq.n	8001ade <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a7c:	e02f      	b.n	8001ade <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	2208      	movs	r2, #8
 8001a84:	409a      	lsls	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d028      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x1e8>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d023      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 020e 	bic.w	r2, r2, #14
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	4798      	blx	r3
    }
  }
  return;
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
}
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40020008 	.word	0x40020008
 8001aec:	4002001c 	.word	0x4002001c
 8001af0:	40020030 	.word	0x40020030
 8001af4:	40020044 	.word	0x40020044
 8001af8:	40020058 	.word	0x40020058
 8001afc:	4002006c 	.word	0x4002006c
 8001b00:	40020000 	.word	0x40020000

08001b04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d108      	bne.n	8001b44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b42:	e007      	b.n	8001b54 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	60da      	str	r2, [r3, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b08b      	sub	sp, #44	@ 0x2c
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b72:	e169      	b.n	8001e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b74:	2201      	movs	r2, #1
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f040 8158 	bne.w	8001e42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4a9a      	ldr	r2, [pc, #616]	@ (8001e00 <HAL_GPIO_Init+0x2a0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d05e      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001b9c:	4a98      	ldr	r2, [pc, #608]	@ (8001e00 <HAL_GPIO_Init+0x2a0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d875      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001ba2:	4a98      	ldr	r2, [pc, #608]	@ (8001e04 <HAL_GPIO_Init+0x2a4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d058      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001ba8:	4a96      	ldr	r2, [pc, #600]	@ (8001e04 <HAL_GPIO_Init+0x2a4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d86f      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bae:	4a96      	ldr	r2, [pc, #600]	@ (8001e08 <HAL_GPIO_Init+0x2a8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d052      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001bb4:	4a94      	ldr	r2, [pc, #592]	@ (8001e08 <HAL_GPIO_Init+0x2a8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d869      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bba:	4a94      	ldr	r2, [pc, #592]	@ (8001e0c <HAL_GPIO_Init+0x2ac>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d04c      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001bc0:	4a92      	ldr	r2, [pc, #584]	@ (8001e0c <HAL_GPIO_Init+0x2ac>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d863      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bc6:	4a92      	ldr	r2, [pc, #584]	@ (8001e10 <HAL_GPIO_Init+0x2b0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d046      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001bcc:	4a90      	ldr	r2, [pc, #576]	@ (8001e10 <HAL_GPIO_Init+0x2b0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d85d      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bd2:	2b12      	cmp	r3, #18
 8001bd4:	d82a      	bhi.n	8001c2c <HAL_GPIO_Init+0xcc>
 8001bd6:	2b12      	cmp	r3, #18
 8001bd8:	d859      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bda:	a201      	add	r2, pc, #4	@ (adr r2, 8001be0 <HAL_GPIO_Init+0x80>)
 8001bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be0:	08001c5b 	.word	0x08001c5b
 8001be4:	08001c35 	.word	0x08001c35
 8001be8:	08001c47 	.word	0x08001c47
 8001bec:	08001c89 	.word	0x08001c89
 8001bf0:	08001c8f 	.word	0x08001c8f
 8001bf4:	08001c8f 	.word	0x08001c8f
 8001bf8:	08001c8f 	.word	0x08001c8f
 8001bfc:	08001c8f 	.word	0x08001c8f
 8001c00:	08001c8f 	.word	0x08001c8f
 8001c04:	08001c8f 	.word	0x08001c8f
 8001c08:	08001c8f 	.word	0x08001c8f
 8001c0c:	08001c8f 	.word	0x08001c8f
 8001c10:	08001c8f 	.word	0x08001c8f
 8001c14:	08001c8f 	.word	0x08001c8f
 8001c18:	08001c8f 	.word	0x08001c8f
 8001c1c:	08001c8f 	.word	0x08001c8f
 8001c20:	08001c8f 	.word	0x08001c8f
 8001c24:	08001c3d 	.word	0x08001c3d
 8001c28:	08001c51 	.word	0x08001c51
 8001c2c:	4a79      	ldr	r2, [pc, #484]	@ (8001e14 <HAL_GPIO_Init+0x2b4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d013      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c32:	e02c      	b.n	8001c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	623b      	str	r3, [r7, #32]
          break;
 8001c3a:	e029      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	3304      	adds	r3, #4
 8001c42:	623b      	str	r3, [r7, #32]
          break;
 8001c44:	e024      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	3308      	adds	r3, #8
 8001c4c:	623b      	str	r3, [r7, #32]
          break;
 8001c4e:	e01f      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	330c      	adds	r3, #12
 8001c56:	623b      	str	r3, [r7, #32]
          break;
 8001c58:	e01a      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c62:	2304      	movs	r3, #4
 8001c64:	623b      	str	r3, [r7, #32]
          break;
 8001c66:	e013      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c70:	2308      	movs	r3, #8
 8001c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	611a      	str	r2, [r3, #16]
          break;
 8001c7a:	e009      	b.n	8001c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	615a      	str	r2, [r3, #20]
          break;
 8001c86:	e003      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e000      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          break;
 8001c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2bff      	cmp	r3, #255	@ 0xff
 8001c94:	d801      	bhi.n	8001c9a <HAL_GPIO_Init+0x13a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	e001      	b.n	8001c9e <HAL_GPIO_Init+0x13e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2bff      	cmp	r3, #255	@ 0xff
 8001ca4:	d802      	bhi.n	8001cac <HAL_GPIO_Init+0x14c>
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	e002      	b.n	8001cb2 <HAL_GPIO_Init+0x152>
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	3b08      	subs	r3, #8
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	210f      	movs	r1, #15
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	6a39      	ldr	r1, [r7, #32]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 80b1 	beq.w	8001e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8001e18 <HAL_GPIO_Init+0x2b8>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a4c      	ldr	r2, [pc, #304]	@ (8001e18 <HAL_GPIO_Init+0x2b8>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b4a      	ldr	r3, [pc, #296]	@ (8001e18 <HAL_GPIO_Init+0x2b8>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cf8:	4a48      	ldr	r2, [pc, #288]	@ (8001e1c <HAL_GPIO_Init+0x2bc>)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a40      	ldr	r2, [pc, #256]	@ (8001e20 <HAL_GPIO_Init+0x2c0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_GPIO_Init+0x1ec>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3f      	ldr	r2, [pc, #252]	@ (8001e24 <HAL_GPIO_Init+0x2c4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00d      	beq.n	8001d48 <HAL_GPIO_Init+0x1e8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e28 <HAL_GPIO_Init+0x2c8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d007      	beq.n	8001d44 <HAL_GPIO_Init+0x1e4>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a3d      	ldr	r2, [pc, #244]	@ (8001e2c <HAL_GPIO_Init+0x2cc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_GPIO_Init+0x1e0>
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e006      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d40:	2304      	movs	r3, #4
 8001d42:	e004      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d50:	f002 0203 	and.w	r2, r2, #3
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	4093      	lsls	r3, r2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d5e:	492f      	ldr	r1, [pc, #188]	@ (8001e1c <HAL_GPIO_Init+0x2bc>)
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d78:	4b2d      	ldr	r3, [pc, #180]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	492c      	ldr	r1, [pc, #176]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d86:	4b2a      	ldr	r3, [pc, #168]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	4928      	ldr	r1, [pc, #160]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001da0:	4b23      	ldr	r3, [pc, #140]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	4922      	ldr	r1, [pc, #136]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60cb      	str	r3, [r1, #12]
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dae:	4b20      	ldr	r3, [pc, #128]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	491e      	ldr	r1, [pc, #120]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4918      	ldr	r1, [pc, #96]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dd6:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4914      	ldr	r1, [pc, #80]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d021      	beq.n	8001e34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001df0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	490e      	ldr	r1, [pc, #56]	@ (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
 8001dfc:	e021      	b.n	8001e42 <HAL_GPIO_Init+0x2e2>
 8001dfe:	bf00      	nop
 8001e00:	10320000 	.word	0x10320000
 8001e04:	10310000 	.word	0x10310000
 8001e08:	10220000 	.word	0x10220000
 8001e0c:	10210000 	.word	0x10210000
 8001e10:	10120000 	.word	0x10120000
 8001e14:	10110000 	.word	0x10110000
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	40010800 	.word	0x40010800
 8001e24:	40010c00 	.word	0x40010c00
 8001e28:	40011000 	.word	0x40011000
 8001e2c:	40011400 	.word	0x40011400
 8001e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	4909      	ldr	r1, [pc, #36]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	3301      	adds	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f47f ae8e 	bne.w	8001b74 <HAL_GPIO_Init+0x14>
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	372c      	adds	r7, #44	@ 0x2c
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ea2:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f002 fa1e 	bl	80042f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e272      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8087 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee8:	4b92      	ldr	r3, [pc, #584]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d00c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d112      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5e>
 8001f00:	4b8c      	ldr	r3, [pc, #560]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f0c:	d10b      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0e:	4b89      	ldr	r3, [pc, #548]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d06c      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x12c>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d168      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e24c      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x76>
 8001f30:	4b80      	ldr	r3, [pc, #512]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a7f      	ldr	r2, [pc, #508]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	e02e      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x98>
 8001f46:	4b7b      	ldr	r3, [pc, #492]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a7a      	ldr	r2, [pc, #488]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b78      	ldr	r3, [pc, #480]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a77      	ldr	r2, [pc, #476]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e01d      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0xbc>
 8001f6a:	4b72      	ldr	r3, [pc, #456]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a71      	ldr	r2, [pc, #452]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b6f      	ldr	r3, [pc, #444]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e00b      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f84:	4b6b      	ldr	r3, [pc, #428]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a6a      	ldr	r2, [pc, #424]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b68      	ldr	r3, [pc, #416]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a67      	ldr	r2, [pc, #412]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fe78 	bl	8000c98 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7fe fe74 	bl	8000c98 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	@ 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e200      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0xe4>
 8001fca:	e014      	b.n	8001ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7fe fe64 	bl	8000c98 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7fe fe60 	bl	8000c98 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	@ 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1ec      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	4b53      	ldr	r3, [pc, #332]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x10c>
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d063      	beq.n	80020ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002002:	4b4c      	ldr	r3, [pc, #304]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800200e:	4b49      	ldr	r3, [pc, #292]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b08      	cmp	r3, #8
 8002018:	d11c      	bne.n	8002054 <HAL_RCC_OscConfig+0x18c>
 800201a:	4b46      	ldr	r3, [pc, #280]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	4b43      	ldr	r3, [pc, #268]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_RCC_OscConfig+0x176>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d001      	beq.n	800203e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e1c0      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b3d      	ldr	r3, [pc, #244]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4939      	ldr	r1, [pc, #228]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	e03a      	b.n	80020ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800205c:	4b36      	ldr	r3, [pc, #216]	@ (8002138 <HAL_RCC_OscConfig+0x270>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe fe19 	bl	8000c98 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206a:	f7fe fe15 	bl	8000c98 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e1a1      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	4b2d      	ldr	r3, [pc, #180]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b2a      	ldr	r3, [pc, #168]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4927      	ldr	r1, [pc, #156]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
 800209c:	e015      	b.n	80020ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209e:	4b26      	ldr	r3, [pc, #152]	@ (8002138 <HAL_RCC_OscConfig+0x270>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7fe fdf8 	bl	8000c98 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ac:	f7fe fdf4 	bl	8000c98 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e180      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	4b1d      	ldr	r3, [pc, #116]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d03a      	beq.n	800214c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d019      	beq.n	8002112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020de:	4b17      	ldr	r3, [pc, #92]	@ (800213c <HAL_RCC_OscConfig+0x274>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7fe fdd8 	bl	8000c98 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ec:	f7fe fdd4 	bl	8000c98 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e160      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800210a:	2001      	movs	r0, #1
 800210c:	f000 fa9c 	bl	8002648 <RCC_Delay>
 8002110:	e01c      	b.n	800214c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_RCC_OscConfig+0x274>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002118:	f7fe fdbe 	bl	8000c98 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211e:	e00f      	b.n	8002140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002120:	f7fe fdba 	bl	8000c98 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d908      	bls.n	8002140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e146      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	42420000 	.word	0x42420000
 800213c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	4b92      	ldr	r3, [pc, #584]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e9      	bne.n	8002120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80a6 	beq.w	80022a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4b8b      	ldr	r3, [pc, #556]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b88      	ldr	r3, [pc, #544]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a87      	ldr	r2, [pc, #540]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b85      	ldr	r3, [pc, #532]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002186:	4b82      	ldr	r3, [pc, #520]	@ (8002390 <HAL_RCC_OscConfig+0x4c8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d118      	bne.n	80021c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002192:	4b7f      	ldr	r3, [pc, #508]	@ (8002390 <HAL_RCC_OscConfig+0x4c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7e      	ldr	r2, [pc, #504]	@ (8002390 <HAL_RCC_OscConfig+0x4c8>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219e:	f7fe fd7b 	bl	8000c98 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a6:	f7fe fd77 	bl	8000c98 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b64      	cmp	r3, #100	@ 0x64
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e103      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	4b75      	ldr	r3, [pc, #468]	@ (8002390 <HAL_RCC_OscConfig+0x4c8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x312>
 80021cc:	4b6f      	ldr	r3, [pc, #444]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4a6e      	ldr	r2, [pc, #440]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6213      	str	r3, [r2, #32]
 80021d8:	e02d      	b.n	8002236 <HAL_RCC_OscConfig+0x36e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x334>
 80021e2:	4b6a      	ldr	r3, [pc, #424]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a69      	ldr	r2, [pc, #420]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6213      	str	r3, [r2, #32]
 80021ee:	4b67      	ldr	r3, [pc, #412]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4a66      	ldr	r2, [pc, #408]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	f023 0304 	bic.w	r3, r3, #4
 80021f8:	6213      	str	r3, [r2, #32]
 80021fa:	e01c      	b.n	8002236 <HAL_RCC_OscConfig+0x36e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d10c      	bne.n	800221e <HAL_RCC_OscConfig+0x356>
 8002204:	4b61      	ldr	r3, [pc, #388]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a60      	ldr	r2, [pc, #384]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	4b5e      	ldr	r3, [pc, #376]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a5d      	ldr	r2, [pc, #372]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	e00b      	b.n	8002236 <HAL_RCC_OscConfig+0x36e>
 800221e:	4b5b      	ldr	r3, [pc, #364]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a5a      	ldr	r2, [pc, #360]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6213      	str	r3, [r2, #32]
 800222a:	4b58      	ldr	r3, [pc, #352]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4a57      	ldr	r2, [pc, #348]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d015      	beq.n	800226a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7fe fd2b 	bl	8000c98 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fd27 	bl	8000c98 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0b1      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	4b4b      	ldr	r3, [pc, #300]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ee      	beq.n	8002246 <HAL_RCC_OscConfig+0x37e>
 8002268:	e014      	b.n	8002294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7fe fd15 	bl	8000c98 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fd11 	bl	8000c98 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e09b      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	4b40      	ldr	r3, [pc, #256]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ee      	bne.n	8002272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b3c      	ldr	r3, [pc, #240]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4a3b      	ldr	r2, [pc, #236]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8087 	beq.w	80023be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b0:	4b36      	ldr	r3, [pc, #216]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d061      	beq.n	8002380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d146      	bne.n	8002352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c4:	4b33      	ldr	r3, [pc, #204]	@ (8002394 <HAL_RCC_OscConfig+0x4cc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe fce5 	bl	8000c98 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe fce1 	bl	8000c98 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e06d      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e4:	4b29      	ldr	r3, [pc, #164]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f8:	d108      	bne.n	800230c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022fa:	4b24      	ldr	r3, [pc, #144]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4921      	ldr	r1, [pc, #132]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230c:	4b1f      	ldr	r3, [pc, #124]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a19      	ldr	r1, [r3, #32]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	430b      	orrs	r3, r1
 800231e:	491b      	ldr	r1, [pc, #108]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <HAL_RCC_OscConfig+0x4cc>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fcb5 	bl	8000c98 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fcb1 	bl	8000c98 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e03d      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002344:	4b11      	ldr	r3, [pc, #68]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x46a>
 8002350:	e035      	b.n	80023be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <HAL_RCC_OscConfig+0x4cc>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe fc9e 	bl	8000c98 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002360:	f7fe fc9a 	bl	8000c98 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e026      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x498>
 800237e:	e01e      	b.n	80023be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d107      	bne.n	8002398 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e019      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
 800238c:	40021000 	.word	0x40021000
 8002390:	40007000 	.word	0x40007000
 8002394:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002398:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <HAL_RCC_OscConfig+0x500>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d001      	beq.n	80023be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000

080023cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0d0      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e0:	4b6a      	ldr	r3, [pc, #424]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d910      	bls.n	8002410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b67      	ldr	r3, [pc, #412]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 0207 	bic.w	r2, r3, #7
 80023f6:	4965      	ldr	r1, [pc, #404]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b63      	ldr	r3, [pc, #396]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0b8      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002428:	4b59      	ldr	r3, [pc, #356]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a58      	ldr	r2, [pc, #352]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002432:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002440:	4b53      	ldr	r3, [pc, #332]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a52      	ldr	r2, [pc, #328]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800244a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800244c:	4b50      	ldr	r3, [pc, #320]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	494d      	ldr	r1, [pc, #308]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d040      	beq.n	80024ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b47      	ldr	r3, [pc, #284]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d115      	bne.n	80024aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e07f      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248a:	4b41      	ldr	r3, [pc, #260]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e073      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249a:	4b3d      	ldr	r3, [pc, #244]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e06b      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024aa:	4b39      	ldr	r3, [pc, #228]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f023 0203 	bic.w	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4936      	ldr	r1, [pc, #216]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024bc:	f7fe fbec 	bl	8000c98 <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	e00a      	b.n	80024da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c4:	f7fe fbe8 	bl	8000c98 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e053      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	4b2d      	ldr	r3, [pc, #180]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 020c 	and.w	r2, r3, #12
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d1eb      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ec:	4b27      	ldr	r3, [pc, #156]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d210      	bcs.n	800251c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b24      	ldr	r3, [pc, #144]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 0207 	bic.w	r2, r3, #7
 8002502:	4922      	ldr	r1, [pc, #136]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b20      	ldr	r3, [pc, #128]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e032      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002528:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4916      	ldr	r1, [pc, #88]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002546:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	490e      	ldr	r1, [pc, #56]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800255a:	f000 f821 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 800255e:	4602      	mov	r2, r0
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	490a      	ldr	r1, [pc, #40]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800256c:	5ccb      	ldrb	r3, [r1, r3]
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	4a09      	ldr	r2, [pc, #36]	@ (8002598 <HAL_RCC_ClockConfig+0x1cc>)
 8002574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_RCC_ClockConfig+0x1d0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fb4a 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40022000 	.word	0x40022000
 8002590:	40021000 	.word	0x40021000
 8002594:	0800462c 	.word	0x0800462c
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004

080025a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x94>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d002      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0x30>
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0x36>
 80025ce:	e027      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x98>)
 80025d2:	613b      	str	r3, [r7, #16]
      break;
 80025d4:	e027      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	0c9b      	lsrs	r3, r3, #18
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	4a17      	ldr	r2, [pc, #92]	@ (800263c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025e0:	5cd3      	ldrb	r3, [r2, r3]
 80025e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d010      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x94>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	0c5b      	lsrs	r3, r3, #17
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	4a11      	ldr	r2, [pc, #68]	@ (8002640 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x98>)
 8002602:	fb03 f202 	mul.w	r2, r3, r2
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	e004      	b.n	800261a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a0c      	ldr	r2, [pc, #48]	@ (8002644 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002614:	fb02 f303 	mul.w	r3, r2, r3
 8002618:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	613b      	str	r3, [r7, #16]
      break;
 800261e:	e002      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002620:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x98>)
 8002622:	613b      	str	r3, [r7, #16]
      break;
 8002624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002626:	693b      	ldr	r3, [r7, #16]
}
 8002628:	4618      	mov	r0, r3
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	007a1200 	.word	0x007a1200
 800263c:	0800463c 	.word	0x0800463c
 8002640:	0800464c 	.word	0x0800464c
 8002644:	003d0900 	.word	0x003d0900

08002648 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002650:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <RCC_Delay+0x34>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0a      	ldr	r2, [pc, #40]	@ (8002680 <RCC_Delay+0x38>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	0a5b      	lsrs	r3, r3, #9
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002664:	bf00      	nop
  }
  while (Delay --);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1e5a      	subs	r2, r3, #1
 800266a:	60fa      	str	r2, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f9      	bne.n	8002664 <RCC_Delay+0x1c>
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	20000000 	.word	0x20000000
 8002680:	10624dd3 	.word	0x10624dd3

08002684 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d07d      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80026a0:	2300      	movs	r3, #0
 80026a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a4:	4b4f      	ldr	r3, [pc, #316]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10d      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b0:	4b4c      	ldr	r3, [pc, #304]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	4a4b      	ldr	r2, [pc, #300]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	61d3      	str	r3, [r2, #28]
 80026bc:	4b49      	ldr	r3, [pc, #292]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c8:	2301      	movs	r3, #1
 80026ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	4b46      	ldr	r3, [pc, #280]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d118      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d8:	4b43      	ldr	r3, [pc, #268]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a42      	ldr	r2, [pc, #264]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e4:	f7fe fad8 	bl	8000c98 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	e008      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ec:	f7fe fad4 	bl	8000c98 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	@ 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e06d      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b3a      	ldr	r3, [pc, #232]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800270a:	4b36      	ldr	r3, [pc, #216]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002712:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d02e      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	429a      	cmp	r2, r3
 8002726:	d027      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002728:	4b2e      	ldr	r3, [pc, #184]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002730:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002732:	4b2e      	ldr	r3, [pc, #184]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002734:	2201      	movs	r2, #1
 8002736:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002738:	4b2c      	ldr	r3, [pc, #176]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800273e:	4a29      	ldr	r2, [pc, #164]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d014      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274e:	f7fe faa3 	bl	8000c98 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7fe fa9f 	bl	8000c98 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e036      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	4b1d      	ldr	r3, [pc, #116]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ee      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002778:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4917      	ldr	r1, [pc, #92]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002786:	4313      	orrs	r3, r2
 8002788:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800278a:	7dfb      	ldrb	r3, [r7, #23]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d105      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002790:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	4a13      	ldr	r2, [pc, #76]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800279a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027a8:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	490b      	ldr	r1, [pc, #44]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027c6:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	4904      	ldr	r1, [pc, #16]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40007000 	.word	0x40007000
 80027ec:	42420440 	.word	0x42420440

080027f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e041      	b.n	8002886 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe f814 	bl	8000844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3304      	adds	r3, #4
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f001 f906 	bl	8003a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d001      	beq.n	80028a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e032      	b.n	800290e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a18      	ldr	r2, [pc, #96]	@ (8002918 <HAL_TIM_Base_Start+0x88>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00e      	beq.n	80028d8 <HAL_TIM_Base_Start+0x48>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c2:	d009      	beq.n	80028d8 <HAL_TIM_Base_Start+0x48>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a14      	ldr	r2, [pc, #80]	@ (800291c <HAL_TIM_Base_Start+0x8c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_TIM_Base_Start+0x48>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a13      	ldr	r2, [pc, #76]	@ (8002920 <HAL_TIM_Base_Start+0x90>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d111      	bne.n	80028fc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d010      	beq.n	800290c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fa:	e007      	b.n	800290c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40000400 	.word	0x40000400
 8002920:	40000800 	.word	0x40000800

08002924 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e041      	b.n	80029ba <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe f854 	bl	80009f8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4610      	mov	r0, r2
 8002964:	f001 f86c 	bl	8003a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_TIM_OC_Start_IT+0x28>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e022      	b.n	8002a32 <HAL_TIM_OC_Start_IT+0x6e>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d109      	bne.n	8002a06 <HAL_TIM_OC_Start_IT+0x42>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	bf14      	ite	ne
 80029fe:	2301      	movne	r3, #1
 8002a00:	2300      	moveq	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	e015      	b.n	8002a32 <HAL_TIM_OC_Start_IT+0x6e>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d109      	bne.n	8002a20 <HAL_TIM_OC_Start_IT+0x5c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	bf14      	ite	ne
 8002a18:	2301      	movne	r3, #1
 8002a1a:	2300      	moveq	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	e008      	b.n	8002a32 <HAL_TIM_OC_Start_IT+0x6e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0a9      	b.n	8002b8e <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d104      	bne.n	8002a4a <HAL_TIM_OC_Start_IT+0x86>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a48:	e013      	b.n	8002a72 <HAL_TIM_OC_Start_IT+0xae>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d104      	bne.n	8002a5a <HAL_TIM_OC_Start_IT+0x96>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a58:	e00b      	b.n	8002a72 <HAL_TIM_OC_Start_IT+0xae>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d104      	bne.n	8002a6a <HAL_TIM_OC_Start_IT+0xa6>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a68:	e003      	b.n	8002a72 <HAL_TIM_OC_Start_IT+0xae>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b0c      	cmp	r3, #12
 8002a76:	d841      	bhi.n	8002afc <HAL_TIM_OC_Start_IT+0x138>
 8002a78:	a201      	add	r2, pc, #4	@ (adr r2, 8002a80 <HAL_TIM_OC_Start_IT+0xbc>)
 8002a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7e:	bf00      	nop
 8002a80:	08002ab5 	.word	0x08002ab5
 8002a84:	08002afd 	.word	0x08002afd
 8002a88:	08002afd 	.word	0x08002afd
 8002a8c:	08002afd 	.word	0x08002afd
 8002a90:	08002ac7 	.word	0x08002ac7
 8002a94:	08002afd 	.word	0x08002afd
 8002a98:	08002afd 	.word	0x08002afd
 8002a9c:	08002afd 	.word	0x08002afd
 8002aa0:	08002ad9 	.word	0x08002ad9
 8002aa4:	08002afd 	.word	0x08002afd
 8002aa8:	08002afd 	.word	0x08002afd
 8002aac:	08002afd 	.word	0x08002afd
 8002ab0:	08002aeb 	.word	0x08002aeb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0202 	orr.w	r2, r2, #2
 8002ac2:	60da      	str	r2, [r3, #12]
      break;
 8002ac4:	e01d      	b.n	8002b02 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0204 	orr.w	r2, r2, #4
 8002ad4:	60da      	str	r2, [r3, #12]
      break;
 8002ad6:	e014      	b.n	8002b02 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0208 	orr.w	r2, r2, #8
 8002ae6:	60da      	str	r2, [r3, #12]
      break;
 8002ae8:	e00b      	b.n	8002b02 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0210 	orr.w	r2, r2, #16
 8002af8:	60da      	str	r2, [r3, #12]
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
      break;
 8002b00:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d141      	bne.n	8002b8c <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	6839      	ldr	r1, [r7, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 fa15 	bl	8003f40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b98 <HAL_TIM_OC_Start_IT+0x1d4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d107      	bne.n	8002b30 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b2e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a18      	ldr	r2, [pc, #96]	@ (8002b98 <HAL_TIM_OC_Start_IT+0x1d4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00e      	beq.n	8002b58 <HAL_TIM_OC_Start_IT+0x194>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b42:	d009      	beq.n	8002b58 <HAL_TIM_OC_Start_IT+0x194>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a14      	ldr	r2, [pc, #80]	@ (8002b9c <HAL_TIM_OC_Start_IT+0x1d8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_TIM_OC_Start_IT+0x194>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a13      	ldr	r2, [pc, #76]	@ (8002ba0 <HAL_TIM_OC_Start_IT+0x1dc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d111      	bne.n	8002b7c <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d010      	beq.n	8002b8c <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7a:	e007      	b.n	8002b8c <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40012c00 	.word	0x40012c00
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000800 	.word	0x40000800

08002ba4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e041      	b.n	8002c3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fd fe58 	bl	8000880 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f000 ff2c 	bl	8003a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <HAL_TIM_PWM_Start+0x24>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e022      	b.n	8002cae <HAL_TIM_PWM_Start+0x6a>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d109      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x3e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	bf14      	ite	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	e015      	b.n	8002cae <HAL_TIM_PWM_Start+0x6a>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d109      	bne.n	8002c9c <HAL_TIM_PWM_Start+0x58>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e008      	b.n	8002cae <HAL_TIM_PWM_Start+0x6a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e05e      	b.n	8002d74 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <HAL_TIM_PWM_Start+0x82>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cc4:	e013      	b.n	8002cee <HAL_TIM_PWM_Start+0xaa>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIM_PWM_Start+0x92>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cd4:	e00b      	b.n	8002cee <HAL_TIM_PWM_Start+0xaa>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_PWM_Start+0xa2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ce4:	e003      	b.n	8002cee <HAL_TIM_PWM_Start+0xaa>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	6839      	ldr	r1, [r7, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f001 f922 	bl	8003f40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1e      	ldr	r2, [pc, #120]	@ (8002d7c <HAL_TIM_PWM_Start+0x138>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d107      	bne.n	8002d16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a18      	ldr	r2, [pc, #96]	@ (8002d7c <HAL_TIM_PWM_Start+0x138>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00e      	beq.n	8002d3e <HAL_TIM_PWM_Start+0xfa>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d28:	d009      	beq.n	8002d3e <HAL_TIM_PWM_Start+0xfa>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a14      	ldr	r2, [pc, #80]	@ (8002d80 <HAL_TIM_PWM_Start+0x13c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <HAL_TIM_PWM_Start+0xfa>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a12      	ldr	r2, [pc, #72]	@ (8002d84 <HAL_TIM_PWM_Start+0x140>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d111      	bne.n	8002d62 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b06      	cmp	r3, #6
 8002d4e:	d010      	beq.n	8002d72 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d60:	e007      	b.n	8002d72 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800

08002d88 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e022      	b.n	8002dfa <HAL_TIM_PWM_Start_DMA+0x72>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d109      	bne.n	8002dce <HAL_TIM_PWM_Start_DMA+0x46>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	e015      	b.n	8002dfa <HAL_TIM_PWM_Start_DMA+0x72>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d109      	bne.n	8002de8 <HAL_TIM_PWM_Start_DMA+0x60>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e008      	b.n	8002dfa <HAL_TIM_PWM_Start_DMA+0x72>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e153      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_TIM_PWM_Start_DMA+0x94>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e022      	b.n	8002e62 <HAL_TIM_PWM_Start_DMA+0xda>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d109      	bne.n	8002e36 <HAL_TIM_PWM_Start_DMA+0xae>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	e015      	b.n	8002e62 <HAL_TIM_PWM_Start_DMA+0xda>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d109      	bne.n	8002e50 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e008      	b.n	8002e62 <HAL_TIM_PWM_Start_DMA+0xda>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d024      	beq.n	8002eb0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_TIM_PWM_Start_DMA+0xea>
 8002e6c:	887b      	ldrh	r3, [r7, #2]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e119      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e84:	e016      	b.n	8002eb4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d104      	bne.n	8002e96 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e94:	e00e      	b.n	8002eb4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d104      	bne.n	8002ea6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ea4:	e006      	b.n	8002eb4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002eae:	e001      	b.n	8002eb4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0fa      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	f200 80ae 	bhi.w	8003018 <HAL_TIM_PWM_Start_DMA+0x290>
 8002ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002ef9 	.word	0x08002ef9
 8002ec8:	08003019 	.word	0x08003019
 8002ecc:	08003019 	.word	0x08003019
 8002ed0:	08003019 	.word	0x08003019
 8002ed4:	08002f41 	.word	0x08002f41
 8002ed8:	08003019 	.word	0x08003019
 8002edc:	08003019 	.word	0x08003019
 8002ee0:	08003019 	.word	0x08003019
 8002ee4:	08002f89 	.word	0x08002f89
 8002ee8:	08003019 	.word	0x08003019
 8002eec:	08003019 	.word	0x08003019
 8002ef0:	08003019 	.word	0x08003019
 8002ef4:	08002fd1 	.word	0x08002fd1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	4a6d      	ldr	r2, [pc, #436]	@ (80030b4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	4a6c      	ldr	r2, [pc, #432]	@ (80030b8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002f06:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	4a6b      	ldr	r2, [pc, #428]	@ (80030bc <HAL_TIM_PWM_Start_DMA+0x334>)
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3334      	adds	r3, #52	@ 0x34
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	887b      	ldrh	r3, [r7, #2]
 8002f20:	f7fe fc12 	bl	8001748 <HAL_DMA_Start_IT>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0bd      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3c:	60da      	str	r2, [r3, #12]
      break;
 8002f3e:	e06e      	b.n	800301e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	4a5b      	ldr	r2, [pc, #364]	@ (80030b4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4c:	4a5a      	ldr	r2, [pc, #360]	@ (80030b8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	4a59      	ldr	r2, [pc, #356]	@ (80030bc <HAL_TIM_PWM_Start_DMA+0x334>)
 8002f56:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3338      	adds	r3, #56	@ 0x38
 8002f64:	461a      	mov	r2, r3
 8002f66:	887b      	ldrh	r3, [r7, #2]
 8002f68:	f7fe fbee 	bl	8001748 <HAL_DMA_Start_IT>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e099      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f84:	60da      	str	r2, [r3, #12]
      break;
 8002f86:	e04a      	b.n	800301e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	4a49      	ldr	r2, [pc, #292]	@ (80030b4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002f8e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	4a48      	ldr	r2, [pc, #288]	@ (80030b8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002f96:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9c:	4a47      	ldr	r2, [pc, #284]	@ (80030bc <HAL_TIM_PWM_Start_DMA+0x334>)
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	333c      	adds	r3, #60	@ 0x3c
 8002fac:	461a      	mov	r2, r3
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	f7fe fbca 	bl	8001748 <HAL_DMA_Start_IT>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e075      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fcc:	60da      	str	r2, [r3, #12]
      break;
 8002fce:	e026      	b.n	800301e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	4a37      	ldr	r2, [pc, #220]	@ (80030b4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002fd6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	4a36      	ldr	r2, [pc, #216]	@ (80030b8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002fde:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe4:	4a35      	ldr	r2, [pc, #212]	@ (80030bc <HAL_TIM_PWM_Start_DMA+0x334>)
 8002fe6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3340      	adds	r3, #64	@ 0x40
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	887b      	ldrh	r3, [r7, #2]
 8002ff8:	f7fe fba6 	bl	8001748 <HAL_DMA_Start_IT>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e051      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003014:	60da      	str	r2, [r3, #12]
      break;
 8003016:	e002      	b.n	800301e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	75fb      	strb	r3, [r7, #23]
      break;
 800301c:	bf00      	nop
  }

  if (status == HAL_OK)
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d141      	bne.n	80030a8 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2201      	movs	r2, #1
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 ff87 	bl	8003f40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a22      	ldr	r2, [pc, #136]	@ (80030c0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d107      	bne.n	800304c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800304a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1b      	ldr	r2, [pc, #108]	@ (80030c0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00e      	beq.n	8003074 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800305e:	d009      	beq.n	8003074 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a17      	ldr	r2, [pc, #92]	@ (80030c4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d004      	beq.n	8003074 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a16      	ldr	r2, [pc, #88]	@ (80030c8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d111      	bne.n	8003098 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	2b06      	cmp	r3, #6
 8003084:	d010      	beq.n	80030a8 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003096:	e007      	b.n	80030a8 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	08003931 	.word	0x08003931
 80030b8:	080039d9 	.word	0x080039d9
 80030bc:	0800389f 	.word	0x0800389f
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40000800 	.word	0x40000800

080030cc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b0c      	cmp	r3, #12
 80030de:	d855      	bhi.n	800318c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80030e0:	a201      	add	r2, pc, #4	@ (adr r2, 80030e8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	0800311d 	.word	0x0800311d
 80030ec:	0800318d 	.word	0x0800318d
 80030f0:	0800318d 	.word	0x0800318d
 80030f4:	0800318d 	.word	0x0800318d
 80030f8:	08003139 	.word	0x08003139
 80030fc:	0800318d 	.word	0x0800318d
 8003100:	0800318d 	.word	0x0800318d
 8003104:	0800318d 	.word	0x0800318d
 8003108:	08003155 	.word	0x08003155
 800310c:	0800318d 	.word	0x0800318d
 8003110:	0800318d 	.word	0x0800318d
 8003114:	0800318d 	.word	0x0800318d
 8003118:	08003171 	.word	0x08003171
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800312a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe fb69 	bl	8001808 <HAL_DMA_Abort_IT>
      break;
 8003136:	e02c      	b.n	8003192 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003146:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe fb5b 	bl	8001808 <HAL_DMA_Abort_IT>
      break;
 8003152:	e01e      	b.n	8003192 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003162:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe fb4d 	bl	8001808 <HAL_DMA_Abort_IT>
      break;
 800316e:	e010      	b.n	8003192 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800317e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe fb3f 	bl	8001808 <HAL_DMA_Abort_IT>
      break;
 800318a:	e002      	b.n	8003192 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      break;
 8003190:	bf00      	nop
  }

  if (status == HAL_OK)
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d157      	bne.n	8003248 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2200      	movs	r2, #0
 800319e:	6839      	ldr	r1, [r7, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fecd 	bl	8003f40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003254 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d117      	bne.n	80031e0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6a1a      	ldr	r2, [r3, #32]
 80031b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10f      	bne.n	80031e0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a1a      	ldr	r2, [r3, #32]
 80031c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d107      	bne.n	80031e0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6a1a      	ldr	r2, [r3, #32]
 80031e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10f      	bne.n	8003210 <HAL_TIM_PWM_Stop_DMA+0x144>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	f240 4344 	movw	r3, #1092	@ 0x444
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800321e:	e013      	b.n	8003248 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b04      	cmp	r3, #4
 8003224:	d104      	bne.n	8003230 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800322e:	e00b      	b.n	8003248 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b08      	cmp	r3, #8
 8003234:	d104      	bne.n	8003240 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800323e:	e003      	b.n	8003248 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40012c00 	.word	0x40012c00

08003258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d122      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b02      	cmp	r3, #2
 800327a:	d11b      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0202 	mvn.w	r2, #2
 8003284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fad2 	bl	8003844 <HAL_TIM_IC_CaptureCallback>
 80032a0:	e005      	b.n	80032ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f001 f87a 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fad4 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d122      	bne.n	8003308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d11b      	bne.n	8003308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0204 	mvn.w	r2, #4
 80032d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2202      	movs	r2, #2
 80032de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 faa8 	bl	8003844 <HAL_TIM_IC_CaptureCallback>
 80032f4:	e005      	b.n	8003302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f001 f850 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 faaa 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b08      	cmp	r3, #8
 8003314:	d122      	bne.n	800335c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b08      	cmp	r3, #8
 8003322:	d11b      	bne.n	800335c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0208 	mvn.w	r2, #8
 800332c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2204      	movs	r2, #4
 8003332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fa7e 	bl	8003844 <HAL_TIM_IC_CaptureCallback>
 8003348:	e005      	b.n	8003356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f001 f826 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fa80 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b10      	cmp	r3, #16
 8003368:	d122      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b10      	cmp	r3, #16
 8003376:	d11b      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0210 	mvn.w	r2, #16
 8003380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2208      	movs	r2, #8
 8003386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fa54 	bl	8003844 <HAL_TIM_IC_CaptureCallback>
 800339c:	e005      	b.n	80033aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fffc 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fa56 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10e      	bne.n	80033dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d107      	bne.n	80033dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0201 	mvn.w	r2, #1
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa2b 	bl	8003832 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e6:	2b80      	cmp	r3, #128	@ 0x80
 80033e8:	d10e      	bne.n	8003408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f4:	2b80      	cmp	r3, #128	@ 0x80
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fe27 	bl	8004056 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003412:	2b40      	cmp	r3, #64	@ 0x40
 8003414:	d10e      	bne.n	8003434 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003420:	2b40      	cmp	r3, #64	@ 0x40
 8003422:	d107      	bne.n	8003434 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800342c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fa23 	bl	800387a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b20      	cmp	r3, #32
 8003440:	d10e      	bne.n	8003460 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b20      	cmp	r3, #32
 800344e:	d107      	bne.n	8003460 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0220 	mvn.w	r2, #32
 8003458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fdf2 	bl	8004044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003482:	2302      	movs	r3, #2
 8003484:	e048      	b.n	8003518 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b0c      	cmp	r3, #12
 8003492:	d839      	bhi.n	8003508 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003494:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034d1 	.word	0x080034d1
 80034a0:	08003509 	.word	0x08003509
 80034a4:	08003509 	.word	0x08003509
 80034a8:	08003509 	.word	0x08003509
 80034ac:	080034df 	.word	0x080034df
 80034b0:	08003509 	.word	0x08003509
 80034b4:	08003509 	.word	0x08003509
 80034b8:	08003509 	.word	0x08003509
 80034bc:	080034ed 	.word	0x080034ed
 80034c0:	08003509 	.word	0x08003509
 80034c4:	08003509 	.word	0x08003509
 80034c8:	08003509 	.word	0x08003509
 80034cc:	080034fb 	.word	0x080034fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fb14 	bl	8003b04 <TIM_OC1_SetConfig>
      break;
 80034dc:	e017      	b.n	800350e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fb73 	bl	8003bd0 <TIM_OC2_SetConfig>
      break;
 80034ea:	e010      	b.n	800350e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fbd6 	bl	8003ca4 <TIM_OC3_SetConfig>
      break;
 80034f8:	e009      	b.n	800350e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fc39 	bl	8003d78 <TIM_OC4_SetConfig>
      break;
 8003506:	e002      	b.n	800350e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	75fb      	strb	r3, [r7, #23]
      break;
 800350c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003516:	7dfb      	ldrb	r3, [r7, #23]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800353a:	2302      	movs	r3, #2
 800353c:	e0ae      	b.n	800369c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b0c      	cmp	r3, #12
 800354a:	f200 809f 	bhi.w	800368c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800354e:	a201      	add	r2, pc, #4	@ (adr r2, 8003554 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	08003589 	.word	0x08003589
 8003558:	0800368d 	.word	0x0800368d
 800355c:	0800368d 	.word	0x0800368d
 8003560:	0800368d 	.word	0x0800368d
 8003564:	080035c9 	.word	0x080035c9
 8003568:	0800368d 	.word	0x0800368d
 800356c:	0800368d 	.word	0x0800368d
 8003570:	0800368d 	.word	0x0800368d
 8003574:	0800360b 	.word	0x0800360b
 8003578:	0800368d 	.word	0x0800368d
 800357c:	0800368d 	.word	0x0800368d
 8003580:	0800368d 	.word	0x0800368d
 8003584:	0800364b 	.word	0x0800364b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fab8 	bl	8003b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0208 	orr.w	r2, r2, #8
 80035a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0204 	bic.w	r2, r2, #4
 80035b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6999      	ldr	r1, [r3, #24]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	619a      	str	r2, [r3, #24]
      break;
 80035c6:	e064      	b.n	8003692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fafe 	bl	8003bd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6999      	ldr	r1, [r3, #24]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	021a      	lsls	r2, r3, #8
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	619a      	str	r2, [r3, #24]
      break;
 8003608:	e043      	b.n	8003692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fb47 	bl	8003ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0208 	orr.w	r2, r2, #8
 8003624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0204 	bic.w	r2, r2, #4
 8003634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69d9      	ldr	r1, [r3, #28]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	61da      	str	r2, [r3, #28]
      break;
 8003648:	e023      	b.n	8003692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fb91 	bl	8003d78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69d9      	ldr	r1, [r3, #28]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	021a      	lsls	r2, r3, #8
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	61da      	str	r2, [r3, #28]
      break;
 800368a:	e002      	b.n	8003692 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	75fb      	strb	r3, [r7, #23]
      break;
 8003690:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800369a:	7dfb      	ldrb	r3, [r7, #23]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_TIM_ConfigClockSource+0x1c>
 80036bc:	2302      	movs	r3, #2
 80036be:	e0b4      	b.n	800382a <HAL_TIM_ConfigClockSource+0x186>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036f8:	d03e      	beq.n	8003778 <HAL_TIM_ConfigClockSource+0xd4>
 80036fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036fe:	f200 8087 	bhi.w	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003706:	f000 8086 	beq.w	8003816 <HAL_TIM_ConfigClockSource+0x172>
 800370a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800370e:	d87f      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b70      	cmp	r3, #112	@ 0x70
 8003712:	d01a      	beq.n	800374a <HAL_TIM_ConfigClockSource+0xa6>
 8003714:	2b70      	cmp	r3, #112	@ 0x70
 8003716:	d87b      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003718:	2b60      	cmp	r3, #96	@ 0x60
 800371a:	d050      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x11a>
 800371c:	2b60      	cmp	r3, #96	@ 0x60
 800371e:	d877      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003720:	2b50      	cmp	r3, #80	@ 0x50
 8003722:	d03c      	beq.n	800379e <HAL_TIM_ConfigClockSource+0xfa>
 8003724:	2b50      	cmp	r3, #80	@ 0x50
 8003726:	d873      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003728:	2b40      	cmp	r3, #64	@ 0x40
 800372a:	d058      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x13a>
 800372c:	2b40      	cmp	r3, #64	@ 0x40
 800372e:	d86f      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003730:	2b30      	cmp	r3, #48	@ 0x30
 8003732:	d064      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15a>
 8003734:	2b30      	cmp	r3, #48	@ 0x30
 8003736:	d86b      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b20      	cmp	r3, #32
 800373a:	d060      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15a>
 800373c:	2b20      	cmp	r3, #32
 800373e:	d867      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d05c      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15a>
 8003744:	2b10      	cmp	r3, #16
 8003746:	d05a      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15a>
 8003748:	e062      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800375a:	f000 fbd2 	bl	8003f02 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800376c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	609a      	str	r2, [r3, #8]
      break;
 8003776:	e04f      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003788:	f000 fbbb 	bl	8003f02 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800379a:	609a      	str	r2, [r3, #8]
      break;
 800379c:	e03c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037aa:	461a      	mov	r2, r3
 80037ac:	f000 fb32 	bl	8003e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2150      	movs	r1, #80	@ 0x50
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fb89 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 80037bc:	e02c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ca:	461a      	mov	r2, r3
 80037cc:	f000 fb50 	bl	8003e70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2160      	movs	r1, #96	@ 0x60
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fb79 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 80037dc:	e01c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 fb12 	bl	8003e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2140      	movs	r1, #64	@ 0x40
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fb69 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 80037fc:	e00c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f000 fb60 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 800380e:	e003      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      break;
 8003814:	e000      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d107      	bne.n	80038c6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038c4:	e02a      	b.n	800391c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d107      	bne.n	80038e0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2202      	movs	r2, #2
 80038d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038de:	e01d      	b.n	800391c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d107      	bne.n	80038fa <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2204      	movs	r2, #4
 80038ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038f8:	e010      	b.n	800391c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	d107      	bne.n	8003914 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2208      	movs	r2, #8
 8003908:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003912:	e003      	b.n	800391c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff ffb5 	bl	800388c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	429a      	cmp	r2, r3
 8003946:	d10b      	bne.n	8003960 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d136      	bne.n	80039c4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800395e:	e031      	b.n	80039c4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	429a      	cmp	r2, r3
 8003968:	d10b      	bne.n	8003982 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2202      	movs	r2, #2
 800396e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d125      	bne.n	80039c4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003980:	e020      	b.n	80039c4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	429a      	cmp	r2, r3
 800398a:	d10b      	bne.n	80039a4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2204      	movs	r2, #4
 8003990:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d114      	bne.n	80039c4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039a2:	e00f      	b.n	80039c4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d10a      	bne.n	80039c4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2208      	movs	r2, #8
 80039b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff ff46 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	771a      	strb	r2, [r3, #28]
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d103      	bne.n	80039f8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	771a      	strb	r2, [r3, #28]
 80039f6:	e019      	b.n	8003a2c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d103      	bne.n	8003a0a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2202      	movs	r2, #2
 8003a06:	771a      	strb	r2, [r3, #28]
 8003a08:	e010      	b.n	8003a2c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d103      	bne.n	8003a1c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2204      	movs	r2, #4
 8003a18:	771a      	strb	r2, [r3, #28]
 8003a1a:	e007      	b.n	8003a2c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d102      	bne.n	8003a2c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2208      	movs	r2, #8
 8003a2a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff ff1b 	bl	8003868 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a29      	ldr	r2, [pc, #164]	@ (8003af8 <TIM_Base_SetConfig+0xb8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00b      	beq.n	8003a70 <TIM_Base_SetConfig+0x30>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5e:	d007      	beq.n	8003a70 <TIM_Base_SetConfig+0x30>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a26      	ldr	r2, [pc, #152]	@ (8003afc <TIM_Base_SetConfig+0xbc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d003      	beq.n	8003a70 <TIM_Base_SetConfig+0x30>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a25      	ldr	r2, [pc, #148]	@ (8003b00 <TIM_Base_SetConfig+0xc0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d108      	bne.n	8003a82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1c      	ldr	r2, [pc, #112]	@ (8003af8 <TIM_Base_SetConfig+0xb8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00b      	beq.n	8003aa2 <TIM_Base_SetConfig+0x62>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a90:	d007      	beq.n	8003aa2 <TIM_Base_SetConfig+0x62>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a19      	ldr	r2, [pc, #100]	@ (8003afc <TIM_Base_SetConfig+0xbc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d003      	beq.n	8003aa2 <TIM_Base_SetConfig+0x62>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a18      	ldr	r2, [pc, #96]	@ (8003b00 <TIM_Base_SetConfig+0xc0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d108      	bne.n	8003ab4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a07      	ldr	r2, [pc, #28]	@ (8003af8 <TIM_Base_SetConfig+0xb8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d103      	bne.n	8003ae8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	615a      	str	r2, [r3, #20]
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	40012c00 	.word	0x40012c00
 8003afc:	40000400 	.word	0x40000400
 8003b00:	40000800 	.word	0x40000800

08003b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f023 0201 	bic.w	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0303 	bic.w	r3, r3, #3
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f023 0302 	bic.w	r3, r3, #2
 8003b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bcc <TIM_OC1_SetConfig+0xc8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d10c      	bne.n	8003b7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0308 	bic.w	r3, r3, #8
 8003b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a13      	ldr	r2, [pc, #76]	@ (8003bcc <TIM_OC1_SetConfig+0xc8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d111      	bne.n	8003ba6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	621a      	str	r2, [r3, #32]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40012c00 	.word	0x40012c00

08003bd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f023 0210 	bic.w	r2, r3, #16
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0320 	bic.w	r3, r3, #32
 8003c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca0 <TIM_OC2_SetConfig+0xd0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10d      	bne.n	8003c4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a14      	ldr	r2, [pc, #80]	@ (8003ca0 <TIM_OC2_SetConfig+0xd0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d113      	bne.n	8003c7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	40012c00 	.word	0x40012c00

08003ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8003d74 <TIM_OC3_SetConfig+0xd0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10d      	bne.n	8003d1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a14      	ldr	r2, [pc, #80]	@ (8003d74 <TIM_OC3_SetConfig+0xd0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d113      	bne.n	8003d4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	621a      	str	r2, [r3, #32]
}
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40012c00 	.word	0x40012c00

08003d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	031b      	lsls	r3, r3, #12
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8003e10 <TIM_OC4_SetConfig+0x98>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d109      	bne.n	8003dec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	019b      	lsls	r3, r3, #6
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	621a      	str	r2, [r3, #32]
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40012c00 	.word	0x40012c00

08003e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f023 0201 	bic.w	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f023 030a 	bic.w	r3, r3, #10
 8003e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f023 0210 	bic.w	r2, r3, #16
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	031b      	lsls	r3, r3, #12
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003eac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	621a      	str	r2, [r3, #32]
}
 8003ec4:	bf00      	nop
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f043 0307 	orr.w	r3, r3, #7
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	609a      	str	r2, [r3, #8]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr

08003f02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b087      	sub	sp, #28
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	021a      	lsls	r2, r3, #8
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	609a      	str	r2, [r3, #8]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2201      	movs	r2, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	401a      	ands	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1a      	ldr	r2, [r3, #32]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e046      	b.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a16      	ldr	r2, [pc, #88]	@ (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fec:	d009      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a12      	ldr	r2, [pc, #72]	@ (800403c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a10      	ldr	r2, [pc, #64]	@ (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d10c      	bne.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	4313      	orrs	r3, r2
 8004012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800

08004044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <_Z12setDutyCyclet>:
const uint16_t dmaPulse = 1;
const uint16_t dmaPulseReload = 4034;
volatile uint16_t dmaBuffer[dmaPulse] = {0};
volatile uint16_t resolution = dmaPulse * dmaPulseReload;
void setDutyCycle(uint16_t dc)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	80fb      	strh	r3, [r7, #6]
	if (dc > resolution) dc = resolution;
 8004072:	4b0b      	ldr	r3, [pc, #44]	@ (80040a0 <_Z12setDutyCyclet+0x38>)
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29b      	uxth	r3, r3
 8004078:	88fa      	ldrh	r2, [r7, #6]
 800407a:	429a      	cmp	r2, r3
 800407c:	bf8c      	ite	hi
 800407e:	2301      	movhi	r3, #1
 8004080:	2300      	movls	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <_Z12setDutyCyclet+0x26>
 8004088:	4b05      	ldr	r3, [pc, #20]	@ (80040a0 <_Z12setDutyCyclet+0x38>)
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	80fb      	strh	r3, [r7, #6]
	dmaBuffer[0] = dc;
 800408e:	4a05      	ldr	r2, [pc, #20]	@ (80040a4 <_Z12setDutyCyclet+0x3c>)
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	8013      	strh	r3, [r2, #0]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	2000000a 	.word	0x2000000a
 80040a4:	200002b0 	.word	0x200002b0

080040a8 <_Z9commucatev>:
volatile uint32_t resetImrFlags;
volatile uint8_t powerStep = 0;
const uint8_t rising[6] = {1,0,1,0,1,0};

void commucate()
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
	 // clear wakeup with interrupt reg.
	EXTI -> IMR = resetImrFlags;
 80040ac:	4a83      	ldr	r2, [pc, #524]	@ (80042bc <_Z9commucatev+0x214>)
 80040ae:	4b84      	ldr	r3, [pc, #528]	@ (80042c0 <_Z9commucatev+0x218>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6013      	str	r3, [r2, #0]
	// disable zc interrupts .
	EXTI -> FTSR &= ~(ZC_A_Pin | ZC_B_Pin | ZC_C_Pin);
 80040b4:	4b81      	ldr	r3, [pc, #516]	@ (80042bc <_Z9commucatev+0x214>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a80      	ldr	r2, [pc, #512]	@ (80042bc <_Z9commucatev+0x214>)
 80040ba:	f423 4342 	bic.w	r3, r3, #49664	@ 0xc200
 80040be:	60d3      	str	r3, [r2, #12]
	EXTI -> RTSR &= ~(ZC_A_Pin | ZC_B_Pin | ZC_C_Pin);
 80040c0:	4b7e      	ldr	r3, [pc, #504]	@ (80042bc <_Z9commucatev+0x214>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a7d      	ldr	r2, [pc, #500]	@ (80042bc <_Z9commucatev+0x214>)
 80040c6:	f423 4342 	bic.w	r3, r3, #49664	@ 0xc200
 80040ca:	6093      	str	r3, [r2, #8]
	// clear any zc pending interrupts.
	EXTI -> PR &= ~(ZC_A_Pin | ZC_B_Pin | ZC_C_Pin);
 80040cc:	4b7b      	ldr	r3, [pc, #492]	@ (80042bc <_Z9commucatev+0x214>)
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	4a7a      	ldr	r2, [pc, #488]	@ (80042bc <_Z9commucatev+0x214>)
 80040d2:	f423 4342 	bic.w	r3, r3, #49664	@ 0xc200
 80040d6:	6153      	str	r3, [r2, #20]
	// go to next power step.
	powerStep++;
 80040d8:	4b7a      	ldr	r3, [pc, #488]	@ (80042c4 <_Z9commucatev+0x21c>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	3301      	adds	r3, #1
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4b78      	ldr	r3, [pc, #480]	@ (80042c4 <_Z9commucatev+0x21c>)
 80040e4:	701a      	strb	r2, [r3, #0]
	powerStep %= 6;
 80040e6:	4b77      	ldr	r3, [pc, #476]	@ (80042c4 <_Z9commucatev+0x21c>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	4b76      	ldr	r3, [pc, #472]	@ (80042c8 <_Z9commucatev+0x220>)
 80040ee:	fba3 1302 	umull	r1, r3, r3, r2
 80040f2:	0899      	lsrs	r1, r3, #2
 80040f4:	460b      	mov	r3, r1
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	440b      	add	r3, r1
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	4b70      	ldr	r3, [pc, #448]	@ (80042c4 <_Z9commucatev+0x21c>)
 8004102:	701a      	strb	r2, [r3, #0]

	if(rising[powerStep])
 8004104:	4b6f      	ldr	r3, [pc, #444]	@ (80042c4 <_Z9commucatev+0x21c>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	4b6f      	ldr	r3, [pc, #444]	@ (80042cc <_Z9commucatev+0x224>)
 800410e:	5c9b      	ldrb	r3, [r3, r2]
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d015      	beq.n	800414a <_Z9commucatev+0xa2>
	{
	//if zc rising
	// enable zc rising interrupt
		EXTI -> RTSR |= zcOff[powerStep];
 800411e:	4b69      	ldr	r3, [pc, #420]	@ (80042c4 <_Z9commucatev+0x21c>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	4b6a      	ldr	r3, [pc, #424]	@ (80042d0 <_Z9commucatev+0x228>)
 8004128:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800412c:	4b63      	ldr	r3, [pc, #396]	@ (80042bc <_Z9commucatev+0x214>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4962      	ldr	r1, [pc, #392]	@ (80042bc <_Z9commucatev+0x214>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
	// enable odLow.
		GPIOA->BSRR = odLow[powerStep];
 8004136:	4b63      	ldr	r3, [pc, #396]	@ (80042c4 <_Z9commucatev+0x21c>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	4619      	mov	r1, r3
 800413e:	4a65      	ldr	r2, [pc, #404]	@ (80042d4 <_Z9commucatev+0x22c>)
 8004140:	4b65      	ldr	r3, [pc, #404]	@ (80042d8 <_Z9commucatev+0x230>)
 8004142:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004146:	6113      	str	r3, [r2, #16]
 8004148:	e014      	b.n	8004174 <_Z9commucatev+0xcc>

	}else
	{
	//else
	// enable zc falling int.
		EXTI -> FTSR |= zcOff[powerStep];
 800414a:	4b5e      	ldr	r3, [pc, #376]	@ (80042c4 <_Z9commucatev+0x21c>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	4b5f      	ldr	r3, [pc, #380]	@ (80042d0 <_Z9commucatev+0x228>)
 8004154:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004158:	4b58      	ldr	r3, [pc, #352]	@ (80042bc <_Z9commucatev+0x214>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4957      	ldr	r1, [pc, #348]	@ (80042bc <_Z9commucatev+0x214>)
 800415e:	4313      	orrs	r3, r2
 8004160:	60cb      	str	r3, [r1, #12]
	// enable odHigh.
		GPIOA->BSRR = odHigh[powerStep];
 8004162:	4b58      	ldr	r3, [pc, #352]	@ (80042c4 <_Z9commucatev+0x21c>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	4619      	mov	r1, r3
 800416a:	4a5a      	ldr	r2, [pc, #360]	@ (80042d4 <_Z9commucatev+0x22c>)
 800416c:	4b5b      	ldr	r3, [pc, #364]	@ (80042dc <_Z9commucatev+0x234>)
 800416e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004172:	6113      	str	r3, [r2, #16]
	}
	// disable odOff
	GPIOA -> BRR = odOff[powerStep];
 8004174:	4b53      	ldr	r3, [pc, #332]	@ (80042c4 <_Z9commucatev+0x21c>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	4619      	mov	r1, r3
 800417c:	4a55      	ldr	r2, [pc, #340]	@ (80042d4 <_Z9commucatev+0x22c>)
 800417e:	4b58      	ldr	r3, [pc, #352]	@ (80042e0 <_Z9commucatev+0x238>)
 8004180:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004184:	6153      	str	r3, [r2, #20]

	if(!rising[powerStep])
 8004186:	4b4f      	ldr	r3, [pc, #316]	@ (80042c4 <_Z9commucatev+0x21c>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	4b4f      	ldr	r3, [pc, #316]	@ (80042cc <_Z9commucatev+0x224>)
 8004190:	5c9b      	ldrb	r3, [r3, r2]
 8004192:	2b00      	cmp	r3, #0
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d038      	beq.n	8004212 <_Z9commucatev+0x16a>
	{
	// if falling
	//  disable cc on timer 3 and timer 2
		TIM3 -> CCER &= ~(ccOff[powerStep]);
 80041a0:	4b48      	ldr	r3, [pc, #288]	@ (80042c4 <_Z9commucatev+0x21c>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	4b4e      	ldr	r3, [pc, #312]	@ (80042e4 <_Z9commucatev+0x23c>)
 80041aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ae:	43da      	mvns	r2, r3
 80041b0:	4b4d      	ldr	r3, [pc, #308]	@ (80042e8 <_Z9commucatev+0x240>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	494c      	ldr	r1, [pc, #304]	@ (80042e8 <_Z9commucatev+0x240>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	620b      	str	r3, [r1, #32]
		TIM2 -> CCER &= ~(ccOff[powerStep]);
 80041ba:	4b42      	ldr	r3, [pc, #264]	@ (80042c4 <_Z9commucatev+0x21c>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	4b48      	ldr	r3, [pc, #288]	@ (80042e4 <_Z9commucatev+0x23c>)
 80041c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c8:	43da      	mvns	r2, r3
 80041ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80041d4:	4013      	ands	r3, r2
 80041d6:	620b      	str	r3, [r1, #32]
	//  disable dma on timer 3 and timer 2
		TIM3 -> DIER &= ~(diOff[powerStep]);
 80041d8:	4b3a      	ldr	r3, [pc, #232]	@ (80042c4 <_Z9commucatev+0x21c>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	4b42      	ldr	r3, [pc, #264]	@ (80042ec <_Z9commucatev+0x244>)
 80041e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e6:	43da      	mvns	r2, r3
 80041e8:	4b3f      	ldr	r3, [pc, #252]	@ (80042e8 <_Z9commucatev+0x240>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	493e      	ldr	r1, [pc, #248]	@ (80042e8 <_Z9commucatev+0x240>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	60cb      	str	r3, [r1, #12]
		TIM2 -> DIER &= ~(diOff[powerStep]);
 80041f2:	4b34      	ldr	r3, [pc, #208]	@ (80042c4 <_Z9commucatev+0x21c>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b3c      	ldr	r3, [pc, #240]	@ (80042ec <_Z9commucatev+0x244>)
 80041fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004200:	43da      	mvns	r2, r3
 8004202:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800420c:	4013      	ands	r3, r2
 800420e:	60cb      	str	r3, [r1, #12]
 8004210:	e033      	b.n	800427a <_Z9commucatev+0x1d2>
	}else
	{
	//else
	// enable cc on timer 3 and timer 2
		TIM3 -> CCER |= (ccOff[powerStep]);
 8004212:	4b2c      	ldr	r3, [pc, #176]	@ (80042c4 <_Z9commucatev+0x21c>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	4b32      	ldr	r3, [pc, #200]	@ (80042e4 <_Z9commucatev+0x23c>)
 800421c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004220:	4b31      	ldr	r3, [pc, #196]	@ (80042e8 <_Z9commucatev+0x240>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	4930      	ldr	r1, [pc, #192]	@ (80042e8 <_Z9commucatev+0x240>)
 8004226:	4313      	orrs	r3, r2
 8004228:	620b      	str	r3, [r1, #32]
		TIM2 -> CCER |= (ccOff[powerStep]);
 800422a:	4b26      	ldr	r3, [pc, #152]	@ (80042c4 <_Z9commucatev+0x21c>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	4b2c      	ldr	r3, [pc, #176]	@ (80042e4 <_Z9commucatev+0x23c>)
 8004234:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004238:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004242:	4313      	orrs	r3, r2
 8004244:	620b      	str	r3, [r1, #32]
	// enable dma on timer 3 and timer 2
		TIM3 -> DIER |= (diOff[powerStep]);
 8004246:	4b1f      	ldr	r3, [pc, #124]	@ (80042c4 <_Z9commucatev+0x21c>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	4b27      	ldr	r3, [pc, #156]	@ (80042ec <_Z9commucatev+0x244>)
 8004250:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004254:	4b24      	ldr	r3, [pc, #144]	@ (80042e8 <_Z9commucatev+0x240>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4923      	ldr	r1, [pc, #140]	@ (80042e8 <_Z9commucatev+0x240>)
 800425a:	4313      	orrs	r3, r2
 800425c:	60cb      	str	r3, [r1, #12]
		TIM2 -> DIER |= (diOff[powerStep]);
 800425e:	4b19      	ldr	r3, [pc, #100]	@ (80042c4 <_Z9commucatev+0x21c>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	4b21      	ldr	r3, [pc, #132]	@ (80042ec <_Z9commucatev+0x244>)
 8004268:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800426c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004276:	4313      	orrs	r3, r2
 8004278:	60cb      	str	r3, [r1, #12]
	}

	//add delay of 2 us.
	TIM1 -> CNT = 0;
 800427a:	4b1d      	ldr	r3, [pc, #116]	@ (80042f0 <_Z9commucatev+0x248>)
 800427c:	2200      	movs	r2, #0
 800427e:	625a      	str	r2, [r3, #36]	@ 0x24
	while (TIM1->CNT < 128); //2us
 8004280:	bf00      	nop
 8004282:	4b1b      	ldr	r3, [pc, #108]	@ (80042f0 <_Z9commucatev+0x248>)
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	2b7f      	cmp	r3, #127	@ 0x7f
 8004288:	bf94      	ite	ls
 800428a:	2301      	movls	r3, #1
 800428c:	2300      	movhi	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1f6      	bne.n	8004282 <_Z9commucatev+0x1da>
	//enable wakeup with int
	EXTI -> IMR = resetImrFlags | zcOff[powerStep];
 8004294:	4b0b      	ldr	r3, [pc, #44]	@ (80042c4 <_Z9commucatev+0x21c>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <_Z9commucatev+0x228>)
 800429e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042a2:	4b07      	ldr	r3, [pc, #28]	@ (80042c0 <_Z9commucatev+0x218>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4905      	ldr	r1, [pc, #20]	@ (80042bc <_Z9commucatev+0x214>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	600b      	str	r3, [r1, #0]
	//reset timer 4 for bump motor
	TIM4 -> CNT = 0;
 80042ac:	4b11      	ldr	r3, [pc, #68]	@ (80042f4 <_Z9commucatev+0x24c>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80042b2:	bf00      	nop
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40010400 	.word	0x40010400
 80042c0:	200002b4 	.word	0x200002b4
 80042c4:	200002b8 	.word	0x200002b8
 80042c8:	aaaaaaab 	.word	0xaaaaaaab
 80042cc:	080046e0 	.word	0x080046e0
 80042d0:	08004650 	.word	0x08004650
 80042d4:	40010800 	.word	0x40010800
 80042d8:	08004668 	.word	0x08004668
 80042dc:	08004680 	.word	0x08004680
 80042e0:	08004698 	.word	0x08004698
 80042e4:	080046b0 	.word	0x080046b0
 80042e8:	40000400 	.word	0x40000400
 80042ec:	080046c8 	.word	0x080046c8
 80042f0:	40012c00 	.word	0x40012c00
 80042f4:	40000800 	.word	0x40000800

080042f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	80fb      	strh	r3, [r7, #6]
	TIM1->CNT = 0;
 8004302:	4b21      	ldr	r3, [pc, #132]	@ (8004388 <HAL_GPIO_EXTI_Callback+0x90>)
 8004304:	2200      	movs	r2, #0
 8004306:	625a      	str	r2, [r3, #36]	@ 0x24
	while(TIM1 -> CNT < (4088 - motorspeedCurrent))
 8004308:	e028      	b.n	800435c <HAL_GPIO_EXTI_Callback+0x64>
		if((zcPortOff[powerStep]->IDR & zcOff[powerStep]) == 0 || (zcPortOff[powerStep]->IDR & zcOff[powerStep]) == 1 )
 800430a:	4b20      	ldr	r3, [pc, #128]	@ (800438c <HAL_GPIO_EXTI_Callback+0x94>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	4b1f      	ldr	r3, [pc, #124]	@ (8004390 <HAL_GPIO_EXTI_Callback+0x98>)
 8004314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	4b1c      	ldr	r3, [pc, #112]	@ (800438c <HAL_GPIO_EXTI_Callback+0x94>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	4619      	mov	r1, r3
 8004322:	4b1c      	ldr	r3, [pc, #112]	@ (8004394 <HAL_GPIO_EXTI_Callback+0x9c>)
 8004324:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d011      	beq.n	8004352 <HAL_GPIO_EXTI_Callback+0x5a>
 800432e:	4b17      	ldr	r3, [pc, #92]	@ (800438c <HAL_GPIO_EXTI_Callback+0x94>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	4b16      	ldr	r3, [pc, #88]	@ (8004390 <HAL_GPIO_EXTI_Callback+0x98>)
 8004338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	4b13      	ldr	r3, [pc, #76]	@ (800438c <HAL_GPIO_EXTI_Callback+0x94>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	4619      	mov	r1, r3
 8004346:	4b13      	ldr	r3, [pc, #76]	@ (8004394 <HAL_GPIO_EXTI_Callback+0x9c>)
 8004348:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800434c:	4013      	ands	r3, r2
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_GPIO_EXTI_Callback+0x5e>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_GPIO_EXTI_Callback+0x60>
 8004356:	2300      	movs	r3, #0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d110      	bne.n	800437e <HAL_GPIO_EXTI_Callback+0x86>
	while(TIM1 -> CNT < (4088 - motorspeedCurrent))
 800435c:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <HAL_GPIO_EXTI_Callback+0x90>)
 800435e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004360:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <HAL_GPIO_EXTI_Callback+0xa0>)
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8004368:	3308      	adds	r3, #8
 800436a:	429a      	cmp	r2, r3
 800436c:	bf34      	ite	cc
 800436e:	2301      	movcc	r3, #1
 8004370:	2300      	movcs	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1c8      	bne.n	800430a <HAL_GPIO_EXTI_Callback+0x12>
			return;
	commucate();
 8004378:	f7ff fe96 	bl	80040a8 <_Z9commucatev>
 800437c:	e000      	b.n	8004380 <HAL_GPIO_EXTI_Callback+0x88>
			return;
 800437e:	bf00      	nop
}
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40012c00 	.word	0x40012c00
 800438c:	200002b8 	.word	0x200002b8
 8004390:	2000000c 	.word	0x2000000c
 8004394:	08004650 	.word	0x08004650
 8004398:	200002ae 	.word	0x200002ae

0800439c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	if (htim == &htim4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a08      	ldr	r2, [pc, #32]	@ (80043c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d109      	bne.n	80043c0 <HAL_TIM_OC_DelayElapsedCallback+0x24>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	7f1b      	ldrb	r3, [r3, #28]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <HAL_TIM_OC_DelayElapsedCallback+0x24>
		if(motorspeedCurrent > 0)
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_TIM_OC_DelayElapsedCallback+0x24>
			commucate();
 80043bc:	f7ff fe74 	bl	80040a8 <_Z9commucatev>
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	2000018c 	.word	0x2000018c
 80043cc:	200002ae 	.word	0x200002ae

080043d0 <_Z16processDmaSignalv>:
////////////////////////////////////////


void processDmaSignal()
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
	newDmaSignal = 0;
 80043d4:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <_Z16processDmaSignalv+0x1c>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	701a      	strb	r2, [r3, #0]
	motorspeed = dmaSignal;
 80043da:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <_Z16processDmaSignalv+0x20>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	b29a      	uxth	r2, r3
 80043e0:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <_Z16processDmaSignalv+0x24>)
 80043e2:	801a      	strh	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	200002a4 	.word	0x200002a4
 80043f0:	200002a8 	.word	0x200002a8
 80043f4:	200002ac 	.word	0x200002ac

080043f8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
    	newDmaSignal = 1;
 8004400:	4b03      	ldr	r3, [pc, #12]	@ (8004410 <HAL_ADC_ConvCpltCallback+0x18>)
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	200002a4 	.word	0x200002a4

08004414 <_Z5setupv>:

void setup()
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
	EXTI -> FTSR = 0;
 8004418:	4b40      	ldr	r3, [pc, #256]	@ (800451c <_Z5setupv+0x108>)
 800441a:	2200      	movs	r2, #0
 800441c:	60da      	str	r2, [r3, #12]
	EXTI -> RTSR = 0;
 800441e:	4b3f      	ldr	r3, [pc, #252]	@ (800451c <_Z5setupv+0x108>)
 8004420:	2200      	movs	r2, #0
 8004422:	609a      	str	r2, [r3, #8]
	HAL_Delay(1000);
 8004424:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004428:	f7fc fc40 	bl	8000cac <HAL_Delay>
	resetImrFlags = EXTI -> IMR;
 800442c:	4b3b      	ldr	r3, [pc, #236]	@ (800451c <_Z5setupv+0x108>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a3b      	ldr	r2, [pc, #236]	@ (8004520 <_Z5setupv+0x10c>)
 8004432:	6013      	str	r3, [r2, #0]
	resetImrFlags &= ~(ZC_A_Pin | ZC_B_Pin | ZC_C_Pin);
 8004434:	4b3a      	ldr	r3, [pc, #232]	@ (8004520 <_Z5setupv+0x10c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f423 4342 	bic.w	r3, r3, #49664	@ 0xc200
 800443c:	4a38      	ldr	r2, [pc, #224]	@ (8004520 <_Z5setupv+0x10c>)
 800443e:	6013      	str	r3, [r2, #0]
	EXTI->IMR = resetImrFlags;
 8004440:	4a36      	ldr	r2, [pc, #216]	@ (800451c <_Z5setupv+0x108>)
 8004442:	4b37      	ldr	r3, [pc, #220]	@ (8004520 <_Z5setupv+0x10c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6013      	str	r3, [r2, #0]
    HAL_ADC_Start_DMA(&hadc1, &dmaSignal, 1);
 8004448:	2201      	movs	r2, #1
 800444a:	4936      	ldr	r1, [pc, #216]	@ (8004524 <_Z5setupv+0x110>)
 800444c:	4836      	ldr	r0, [pc, #216]	@ (8004528 <_Z5setupv+0x114>)
 800444e:	f7fc fd29 	bl	8000ea4 <HAL_ADC_Start_DMA>

    if(HAL_TIM_Base_Start(&htim1) != HAL_OK)
 8004452:	4836      	ldr	r0, [pc, #216]	@ (800452c <_Z5setupv+0x118>)
 8004454:	f7fe fa1c 	bl	8002890 <HAL_TIM_Base_Start>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <_Z5setupv+0x58>
    	Error_Handler();
 8004468:	f7fc f94a 	bl	8000700 <Error_Handler>
    if(HAL_TIM_Base_Start(&htim3) != HAL_OK)
 800446c:	4830      	ldr	r0, [pc, #192]	@ (8004530 <_Z5setupv+0x11c>)
 800446e:	f7fe fa0f 	bl	8002890 <HAL_TIM_Base_Start>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <_Z5setupv+0x72>
    	Error_Handler();
 8004482:	f7fc f93d 	bl	8000700 <Error_Handler>
    if(HAL_TIM_Base_Start(&htim2) != HAL_OK)
 8004486:	482b      	ldr	r0, [pc, #172]	@ (8004534 <_Z5setupv+0x120>)
 8004488:	f7fe fa02 	bl	8002890 <HAL_TIM_Base_Start>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	bf14      	ite	ne
 8004492:	2301      	movne	r3, #1
 8004494:	2300      	moveq	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <_Z5setupv+0x8c>
    	Error_Handler();
 800449c:	f7fc f930 	bl	8000700 <Error_Handler>

    TIM2 -> CCR1 = 0;
 80044a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80044a4:	2200      	movs	r2, #0
 80044a6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR3 = 0;
 80044a8:	4b23      	ldr	r3, [pc, #140]	@ (8004538 <_Z5setupv+0x124>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM3 -> CCR4 = 0;
 80044ae:	4b22      	ldr	r3, [pc, #136]	@ (8004538 <_Z5setupv+0x124>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80044b4:	2100      	movs	r1, #0
 80044b6:	481f      	ldr	r0, [pc, #124]	@ (8004534 <_Z5setupv+0x120>)
 80044b8:	f7fe fbc4 	bl	8002c44 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80044bc:	2108      	movs	r1, #8
 80044be:	481c      	ldr	r0, [pc, #112]	@ (8004530 <_Z5setupv+0x11c>)
 80044c0:	f7fe fbc0 	bl	8002c44 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80044c4:	210c      	movs	r1, #12
 80044c6:	481a      	ldr	r0, [pc, #104]	@ (8004530 <_Z5setupv+0x11c>)
 80044c8:	f7fe fbbc 	bl	8002c44 <HAL_TIM_PWM_Start>


    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80044cc:	2100      	movs	r1, #0
 80044ce:	4819      	ldr	r0, [pc, #100]	@ (8004534 <_Z5setupv+0x120>)
 80044d0:	f7fe fdfc 	bl	80030cc <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_3);
 80044d4:	2108      	movs	r1, #8
 80044d6:	4816      	ldr	r0, [pc, #88]	@ (8004530 <_Z5setupv+0x11c>)
 80044d8:	f7fe fdf8 	bl	80030cc <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_4);
 80044dc:	210c      	movs	r1, #12
 80044de:	4814      	ldr	r0, [pc, #80]	@ (8004530 <_Z5setupv+0x11c>)
 80044e0:	f7fe fdf4 	bl	80030cc <HAL_TIM_PWM_Stop_DMA>

    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)dmaBuffer, dmaPulse);
 80044e4:	2301      	movs	r3, #1
 80044e6:	4a15      	ldr	r2, [pc, #84]	@ (800453c <_Z5setupv+0x128>)
 80044e8:	2100      	movs	r1, #0
 80044ea:	4812      	ldr	r0, [pc, #72]	@ (8004534 <_Z5setupv+0x120>)
 80044ec:	f7fe fc4c 	bl	8002d88 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3, (uint32_t*)dmaBuffer, dmaPulse);
 80044f0:	2301      	movs	r3, #1
 80044f2:	4a12      	ldr	r2, [pc, #72]	@ (800453c <_Z5setupv+0x128>)
 80044f4:	2108      	movs	r1, #8
 80044f6:	480e      	ldr	r0, [pc, #56]	@ (8004530 <_Z5setupv+0x11c>)
 80044f8:	f7fe fc46 	bl	8002d88 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t*)dmaBuffer, dmaPulse);
 80044fc:	2301      	movs	r3, #1
 80044fe:	4a0f      	ldr	r2, [pc, #60]	@ (800453c <_Z5setupv+0x128>)
 8004500:	210c      	movs	r1, #12
 8004502:	480b      	ldr	r0, [pc, #44]	@ (8004530 <_Z5setupv+0x11c>)
 8004504:	f7fe fc40 	bl	8002d88 <HAL_TIM_PWM_Start_DMA>

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 150);
 8004508:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <_Z5setupv+0x12c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2296      	movs	r2, #150	@ 0x96
 800450e:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8004510:	2100      	movs	r1, #0
 8004512:	480b      	ldr	r0, [pc, #44]	@ (8004540 <_Z5setupv+0x12c>)
 8004514:	f7fe fa56 	bl	80029c4 <HAL_TIM_OC_Start_IT>
}
 8004518:	bf00      	nop
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40010400 	.word	0x40010400
 8004520:	200002b4 	.word	0x200002b4
 8004524:	200002a8 	.word	0x200002a8
 8004528:	20000040 	.word	0x20000040
 800452c:	200000b4 	.word	0x200000b4
 8004530:	20000144 	.word	0x20000144
 8004534:	200000fc 	.word	0x200000fc
 8004538:	40000400 	.word	0x40000400
 800453c:	200002b0 	.word	0x200002b0
 8004540:	2000018c 	.word	0x2000018c

08004544 <maincpp>:

void maincpp()
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
	setup();
 8004548:	f7ff ff64 	bl	8004414 <_Z5setupv>
    while(1){
    	if (newDmaSignal)
 800454c:	4b16      	ldr	r3, [pc, #88]	@ (80045a8 <maincpp+0x64>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d024      	beq.n	800459e <maincpp+0x5a>
    	{
    		processDmaSignal();
 8004554:	f7ff ff3c 	bl	80043d0 <_Z16processDmaSignalv>
    		if (motorspeed != motorspeedCurrent)
 8004558:	4b14      	ldr	r3, [pc, #80]	@ (80045ac <maincpp+0x68>)
 800455a:	881a      	ldrh	r2, [r3, #0]
 800455c:	4b14      	ldr	r3, [pc, #80]	@ (80045b0 <maincpp+0x6c>)
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d017      	beq.n	8004594 <maincpp+0x50>
    		{
    			if((motorspeed - motorspeedCurrent) > 10)
 8004564:	4b11      	ldr	r3, [pc, #68]	@ (80045ac <maincpp+0x68>)
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <maincpp+0x6c>)
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b0a      	cmp	r3, #10
 8004572:	dd06      	ble.n	8004582 <maincpp+0x3e>
    			{
    				motorspeedCurrent += 10;
 8004574:	4b0e      	ldr	r3, [pc, #56]	@ (80045b0 <maincpp+0x6c>)
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	330a      	adds	r3, #10
 800457a:	b29a      	uxth	r2, r3
 800457c:	4b0c      	ldr	r3, [pc, #48]	@ (80045b0 <maincpp+0x6c>)
 800457e:	801a      	strh	r2, [r3, #0]
 8004580:	e003      	b.n	800458a <maincpp+0x46>
    			}
    			else
    			{
    				motorspeedCurrent = motorspeed;
 8004582:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <maincpp+0x68>)
 8004584:	881a      	ldrh	r2, [r3, #0]
 8004586:	4b0a      	ldr	r3, [pc, #40]	@ (80045b0 <maincpp+0x6c>)
 8004588:	801a      	strh	r2, [r3, #0]
    			}
    			setDutyCycle(motorspeedCurrent);
 800458a:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <maincpp+0x6c>)
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fd6a 	bl	8004068 <_Z12setDutyCyclet>
    		}
    		HAL_ADC_Start_DMA(&hadc1, &dmaSignal, 1);
 8004594:	2201      	movs	r2, #1
 8004596:	4907      	ldr	r1, [pc, #28]	@ (80045b4 <maincpp+0x70>)
 8004598:	4807      	ldr	r0, [pc, #28]	@ (80045b8 <maincpp+0x74>)
 800459a:	f7fc fc83 	bl	8000ea4 <HAL_ADC_Start_DMA>
    	}
    	HAL_Delay(1);
 800459e:	2001      	movs	r0, #1
 80045a0:	f7fc fb84 	bl	8000cac <HAL_Delay>
    	if (newDmaSignal)
 80045a4:	e7d2      	b.n	800454c <maincpp+0x8>
 80045a6:	bf00      	nop
 80045a8:	200002a4 	.word	0x200002a4
 80045ac:	200002ac 	.word	0x200002ac
 80045b0:	200002ae 	.word	0x200002ae
 80045b4:	200002a8 	.word	0x200002a8
 80045b8:	20000040 	.word	0x20000040

080045bc <memset>:
 80045bc:	4603      	mov	r3, r0
 80045be:	4402      	add	r2, r0
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d100      	bne.n	80045c6 <memset+0xa>
 80045c4:	4770      	bx	lr
 80045c6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ca:	e7f9      	b.n	80045c0 <memset+0x4>

080045cc <__libc_init_array>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	2600      	movs	r6, #0
 80045d0:	4d0c      	ldr	r5, [pc, #48]	@ (8004604 <__libc_init_array+0x38>)
 80045d2:	4c0d      	ldr	r4, [pc, #52]	@ (8004608 <__libc_init_array+0x3c>)
 80045d4:	1b64      	subs	r4, r4, r5
 80045d6:	10a4      	asrs	r4, r4, #2
 80045d8:	42a6      	cmp	r6, r4
 80045da:	d109      	bne.n	80045f0 <__libc_init_array+0x24>
 80045dc:	f000 f81a 	bl	8004614 <_init>
 80045e0:	2600      	movs	r6, #0
 80045e2:	4d0a      	ldr	r5, [pc, #40]	@ (800460c <__libc_init_array+0x40>)
 80045e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004610 <__libc_init_array+0x44>)
 80045e6:	1b64      	subs	r4, r4, r5
 80045e8:	10a4      	asrs	r4, r4, #2
 80045ea:	42a6      	cmp	r6, r4
 80045ec:	d105      	bne.n	80045fa <__libc_init_array+0x2e>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f4:	4798      	blx	r3
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7ee      	b.n	80045d8 <__libc_init_array+0xc>
 80045fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fe:	4798      	blx	r3
 8004600:	3601      	adds	r6, #1
 8004602:	e7f2      	b.n	80045ea <__libc_init_array+0x1e>
 8004604:	080046e8 	.word	0x080046e8
 8004608:	080046e8 	.word	0x080046e8
 800460c:	080046e8 	.word	0x080046e8
 8004610:	080046ec 	.word	0x080046ec

08004614 <_init>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr

08004620 <_fini>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr
